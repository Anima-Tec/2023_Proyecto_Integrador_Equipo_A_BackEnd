
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Localidad
 * 
 */
export type Localidad = $Result.DefaultSelection<Prisma.$LocalidadPayload>
/**
 * Model Institucion
 * 
 */
export type Institucion = $Result.DefaultSelection<Prisma.$InstitucionPayload>
/**
 * Model Oficina
 * 
 */
export type Oficina = $Result.DefaultSelection<Prisma.$OficinaPayload>
/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model UsuarioTecnico
 * 
 */
export type UsuarioTecnico = $Result.DefaultSelection<Prisma.$UsuarioTecnicoPayload>
/**
 * Model UsuarioSupervisor
 * 
 */
export type UsuarioSupervisor = $Result.DefaultSelection<Prisma.$UsuarioSupervisorPayload>
/**
 * Model Reporte
 * 
 */
export type Reporte = $Result.DefaultSelection<Prisma.$ReportePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Localidads
 * const localidads = await prisma.localidad.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Localidads
   * const localidads = await prisma.localidad.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.localidad`: Exposes CRUD operations for the **Localidad** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Localidads
    * const localidads = await prisma.localidad.findMany()
    * ```
    */
  get localidad(): Prisma.LocalidadDelegate<ExtArgs>;

  /**
   * `prisma.institucion`: Exposes CRUD operations for the **Institucion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Institucions
    * const institucions = await prisma.institucion.findMany()
    * ```
    */
  get institucion(): Prisma.InstitucionDelegate<ExtArgs>;

  /**
   * `prisma.oficina`: Exposes CRUD operations for the **Oficina** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Oficinas
    * const oficinas = await prisma.oficina.findMany()
    * ```
    */
  get oficina(): Prisma.OficinaDelegate<ExtArgs>;

  /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs>;

  /**
   * `prisma.usuarioTecnico`: Exposes CRUD operations for the **UsuarioTecnico** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsuarioTecnicos
    * const usuarioTecnicos = await prisma.usuarioTecnico.findMany()
    * ```
    */
  get usuarioTecnico(): Prisma.UsuarioTecnicoDelegate<ExtArgs>;

  /**
   * `prisma.usuarioSupervisor`: Exposes CRUD operations for the **UsuarioSupervisor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsuarioSupervisors
    * const usuarioSupervisors = await prisma.usuarioSupervisor.findMany()
    * ```
    */
  get usuarioSupervisor(): Prisma.UsuarioSupervisorDelegate<ExtArgs>;

  /**
   * `prisma.reporte`: Exposes CRUD operations for the **Reporte** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reportes
    * const reportes = await prisma.reporte.findMany()
    * ```
    */
  get reporte(): Prisma.ReporteDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.2.0
   * Query Engine version: 2804dc98259d2ea960602aca6b8e7fdc03c1758f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Localidad: 'Localidad',
    Institucion: 'Institucion',
    Oficina: 'Oficina',
    Usuario: 'Usuario',
    UsuarioTecnico: 'UsuarioTecnico',
    UsuarioSupervisor: 'UsuarioSupervisor',
    Reporte: 'Reporte'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'localidad' | 'institucion' | 'oficina' | 'usuario' | 'usuarioTecnico' | 'usuarioSupervisor' | 'reporte'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Localidad: {
        payload: Prisma.$LocalidadPayload<ExtArgs>
        fields: Prisma.LocalidadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocalidadFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocalidadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocalidadFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocalidadPayload>
          }
          findFirst: {
            args: Prisma.LocalidadFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocalidadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocalidadFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocalidadPayload>
          }
          findMany: {
            args: Prisma.LocalidadFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocalidadPayload>[]
          }
          create: {
            args: Prisma.LocalidadCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocalidadPayload>
          }
          createMany: {
            args: Prisma.LocalidadCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LocalidadDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocalidadPayload>
          }
          update: {
            args: Prisma.LocalidadUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocalidadPayload>
          }
          deleteMany: {
            args: Prisma.LocalidadDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LocalidadUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LocalidadUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LocalidadPayload>
          }
          aggregate: {
            args: Prisma.LocalidadAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLocalidad>
          }
          groupBy: {
            args: Prisma.LocalidadGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LocalidadGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocalidadCountArgs<ExtArgs>,
            result: $Utils.Optional<LocalidadCountAggregateOutputType> | number
          }
        }
      }
      Institucion: {
        payload: Prisma.$InstitucionPayload<ExtArgs>
        fields: Prisma.InstitucionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InstitucionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstitucionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InstitucionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstitucionPayload>
          }
          findFirst: {
            args: Prisma.InstitucionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstitucionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InstitucionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstitucionPayload>
          }
          findMany: {
            args: Prisma.InstitucionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstitucionPayload>[]
          }
          create: {
            args: Prisma.InstitucionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstitucionPayload>
          }
          createMany: {
            args: Prisma.InstitucionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.InstitucionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstitucionPayload>
          }
          update: {
            args: Prisma.InstitucionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstitucionPayload>
          }
          deleteMany: {
            args: Prisma.InstitucionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.InstitucionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.InstitucionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstitucionPayload>
          }
          aggregate: {
            args: Prisma.InstitucionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInstitucion>
          }
          groupBy: {
            args: Prisma.InstitucionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InstitucionGroupByOutputType>[]
          }
          count: {
            args: Prisma.InstitucionCountArgs<ExtArgs>,
            result: $Utils.Optional<InstitucionCountAggregateOutputType> | number
          }
        }
      }
      Oficina: {
        payload: Prisma.$OficinaPayload<ExtArgs>
        fields: Prisma.OficinaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OficinaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OficinaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OficinaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OficinaPayload>
          }
          findFirst: {
            args: Prisma.OficinaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OficinaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OficinaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OficinaPayload>
          }
          findMany: {
            args: Prisma.OficinaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OficinaPayload>[]
          }
          create: {
            args: Prisma.OficinaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OficinaPayload>
          }
          createMany: {
            args: Prisma.OficinaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OficinaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OficinaPayload>
          }
          update: {
            args: Prisma.OficinaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OficinaPayload>
          }
          deleteMany: {
            args: Prisma.OficinaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OficinaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OficinaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OficinaPayload>
          }
          aggregate: {
            args: Prisma.OficinaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOficina>
          }
          groupBy: {
            args: Prisma.OficinaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OficinaGroupByOutputType>[]
          }
          count: {
            args: Prisma.OficinaCountArgs<ExtArgs>,
            result: $Utils.Optional<OficinaCountAggregateOutputType> | number
          }
        }
      }
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      UsuarioTecnico: {
        payload: Prisma.$UsuarioTecnicoPayload<ExtArgs>
        fields: Prisma.UsuarioTecnicoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioTecnicoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioTecnicoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioTecnicoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioTecnicoPayload>
          }
          findFirst: {
            args: Prisma.UsuarioTecnicoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioTecnicoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioTecnicoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioTecnicoPayload>
          }
          findMany: {
            args: Prisma.UsuarioTecnicoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioTecnicoPayload>[]
          }
          create: {
            args: Prisma.UsuarioTecnicoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioTecnicoPayload>
          }
          createMany: {
            args: Prisma.UsuarioTecnicoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsuarioTecnicoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioTecnicoPayload>
          }
          update: {
            args: Prisma.UsuarioTecnicoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioTecnicoPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioTecnicoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioTecnicoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioTecnicoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioTecnicoPayload>
          }
          aggregate: {
            args: Prisma.UsuarioTecnicoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsuarioTecnico>
          }
          groupBy: {
            args: Prisma.UsuarioTecnicoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioTecnicoGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioTecnicoCountArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioTecnicoCountAggregateOutputType> | number
          }
        }
      }
      UsuarioSupervisor: {
        payload: Prisma.$UsuarioSupervisorPayload<ExtArgs>
        fields: Prisma.UsuarioSupervisorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioSupervisorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioSupervisorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioSupervisorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioSupervisorPayload>
          }
          findFirst: {
            args: Prisma.UsuarioSupervisorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioSupervisorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioSupervisorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioSupervisorPayload>
          }
          findMany: {
            args: Prisma.UsuarioSupervisorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioSupervisorPayload>[]
          }
          create: {
            args: Prisma.UsuarioSupervisorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioSupervisorPayload>
          }
          createMany: {
            args: Prisma.UsuarioSupervisorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsuarioSupervisorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioSupervisorPayload>
          }
          update: {
            args: Prisma.UsuarioSupervisorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioSupervisorPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioSupervisorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioSupervisorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioSupervisorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsuarioSupervisorPayload>
          }
          aggregate: {
            args: Prisma.UsuarioSupervisorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsuarioSupervisor>
          }
          groupBy: {
            args: Prisma.UsuarioSupervisorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioSupervisorGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioSupervisorCountArgs<ExtArgs>,
            result: $Utils.Optional<UsuarioSupervisorCountAggregateOutputType> | number
          }
        }
      }
      Reporte: {
        payload: Prisma.$ReportePayload<ExtArgs>
        fields: Prisma.ReporteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReporteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReporteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportePayload>
          }
          findFirst: {
            args: Prisma.ReporteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReporteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportePayload>
          }
          findMany: {
            args: Prisma.ReporteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportePayload>[]
          }
          create: {
            args: Prisma.ReporteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportePayload>
          }
          createMany: {
            args: Prisma.ReporteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReporteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportePayload>
          }
          update: {
            args: Prisma.ReporteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportePayload>
          }
          deleteMany: {
            args: Prisma.ReporteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReporteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReporteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportePayload>
          }
          aggregate: {
            args: Prisma.ReporteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReporte>
          }
          groupBy: {
            args: Prisma.ReporteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReporteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReporteCountArgs<ExtArgs>,
            result: $Utils.Optional<ReporteCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type LocalidadCountOutputType
   */

  export type LocalidadCountOutputType = {
    Institucion: number
  }

  export type LocalidadCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Institucion?: boolean | LocalidadCountOutputTypeCountInstitucionArgs
  }

  // Custom InputTypes

  /**
   * LocalidadCountOutputType without action
   */
  export type LocalidadCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocalidadCountOutputType
     */
    select?: LocalidadCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * LocalidadCountOutputType without action
   */
  export type LocalidadCountOutputTypeCountInstitucionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: OficinaWhereInput
  }



  /**
   * Count Type InstitucionCountOutputType
   */

  export type InstitucionCountOutputType = {
    oficinas: number
  }

  export type InstitucionCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    oficinas?: boolean | InstitucionCountOutputTypeCountOficinasArgs
  }

  // Custom InputTypes

  /**
   * InstitucionCountOutputType without action
   */
  export type InstitucionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitucionCountOutputType
     */
    select?: InstitucionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * InstitucionCountOutputType without action
   */
  export type InstitucionCountOutputTypeCountOficinasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: OficinaWhereInput
  }



  /**
   * Count Type OficinaCountOutputType
   */

  export type OficinaCountOutputType = {
    usuarios: number
  }

  export type OficinaCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    usuarios?: boolean | OficinaCountOutputTypeCountUsuariosArgs
  }

  // Custom InputTypes

  /**
   * OficinaCountOutputType without action
   */
  export type OficinaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OficinaCountOutputType
     */
    select?: OficinaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * OficinaCountOutputType without action
   */
  export type OficinaCountOutputTypeCountUsuariosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
  }



  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    reportes: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    reportes?: boolean | UsuarioCountOutputTypeCountReportesArgs
  }

  // Custom InputTypes

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountReportesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ReporteWhereInput
  }



  /**
   * Count Type UsuarioTecnicoCountOutputType
   */

  export type UsuarioTecnicoCountOutputType = {
    reportesSolucionados: number
  }

  export type UsuarioTecnicoCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    reportesSolucionados?: boolean | UsuarioTecnicoCountOutputTypeCountReportesSolucionadosArgs
  }

  // Custom InputTypes

  /**
   * UsuarioTecnicoCountOutputType without action
   */
  export type UsuarioTecnicoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioTecnicoCountOutputType
     */
    select?: UsuarioTecnicoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsuarioTecnicoCountOutputType without action
   */
  export type UsuarioTecnicoCountOutputTypeCountReportesSolucionadosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ReporteWhereInput
  }



  /**
   * Count Type UsuarioSupervisorCountOutputType
   */

  export type UsuarioSupervisorCountOutputType = {
    reportesSupervisados: number
  }

  export type UsuarioSupervisorCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    reportesSupervisados?: boolean | UsuarioSupervisorCountOutputTypeCountReportesSupervisadosArgs
  }

  // Custom InputTypes

  /**
   * UsuarioSupervisorCountOutputType without action
   */
  export type UsuarioSupervisorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioSupervisorCountOutputType
     */
    select?: UsuarioSupervisorCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsuarioSupervisorCountOutputType without action
   */
  export type UsuarioSupervisorCountOutputTypeCountReportesSupervisadosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ReporteWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Localidad
   */

  export type AggregateLocalidad = {
    _count: LocalidadCountAggregateOutputType | null
    _avg: LocalidadAvgAggregateOutputType | null
    _sum: LocalidadSumAggregateOutputType | null
    _min: LocalidadMinAggregateOutputType | null
    _max: LocalidadMaxAggregateOutputType | null
  }

  export type LocalidadAvgAggregateOutputType = {
    id: number | null
  }

  export type LocalidadSumAggregateOutputType = {
    id: number | null
  }

  export type LocalidadMinAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type LocalidadMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type LocalidadCountAggregateOutputType = {
    id: number
    nombre: number
    _all: number
  }


  export type LocalidadAvgAggregateInputType = {
    id?: true
  }

  export type LocalidadSumAggregateInputType = {
    id?: true
  }

  export type LocalidadMinAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type LocalidadMaxAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type LocalidadCountAggregateInputType = {
    id?: true
    nombre?: true
    _all?: true
  }

  export type LocalidadAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Localidad to aggregate.
     */
    where?: LocalidadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Localidads to fetch.
     */
    orderBy?: LocalidadOrderByWithRelationInput | LocalidadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocalidadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Localidads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Localidads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Localidads
    **/
    _count?: true | LocalidadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocalidadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocalidadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocalidadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocalidadMaxAggregateInputType
  }

  export type GetLocalidadAggregateType<T extends LocalidadAggregateArgs> = {
        [P in keyof T & keyof AggregateLocalidad]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocalidad[P]>
      : GetScalarType<T[P], AggregateLocalidad[P]>
  }




  export type LocalidadGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: LocalidadWhereInput
    orderBy?: LocalidadOrderByWithAggregationInput | LocalidadOrderByWithAggregationInput[]
    by: LocalidadScalarFieldEnum[] | LocalidadScalarFieldEnum
    having?: LocalidadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocalidadCountAggregateInputType | true
    _avg?: LocalidadAvgAggregateInputType
    _sum?: LocalidadSumAggregateInputType
    _min?: LocalidadMinAggregateInputType
    _max?: LocalidadMaxAggregateInputType
  }

  export type LocalidadGroupByOutputType = {
    id: number
    nombre: string
    _count: LocalidadCountAggregateOutputType | null
    _avg: LocalidadAvgAggregateOutputType | null
    _sum: LocalidadSumAggregateOutputType | null
    _min: LocalidadMinAggregateOutputType | null
    _max: LocalidadMaxAggregateOutputType | null
  }

  type GetLocalidadGroupByPayload<T extends LocalidadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocalidadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocalidadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocalidadGroupByOutputType[P]>
            : GetScalarType<T[P], LocalidadGroupByOutputType[P]>
        }
      >
    >


  export type LocalidadSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    Institucion?: boolean | Localidad$InstitucionArgs<ExtArgs>
    _count?: boolean | LocalidadCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["localidad"]>

  export type LocalidadSelectScalar = {
    id?: boolean
    nombre?: boolean
  }

  export type LocalidadInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Institucion?: boolean | Localidad$InstitucionArgs<ExtArgs>
    _count?: boolean | LocalidadCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $LocalidadPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Localidad"
    objects: {
      Institucion: Prisma.$OficinaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      nombre: string
    }, ExtArgs["result"]["localidad"]>
    composites: {}
  }


  type LocalidadGetPayload<S extends boolean | null | undefined | LocalidadDefaultArgs> = $Result.GetResult<Prisma.$LocalidadPayload, S>

  type LocalidadCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<LocalidadFindManyArgs, 'select' | 'include'> & {
      select?: LocalidadCountAggregateInputType | true
    }

  export interface LocalidadDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Localidad'], meta: { name: 'Localidad' } }
    /**
     * Find zero or one Localidad that matches the filter.
     * @param {LocalidadFindUniqueArgs} args - Arguments to find a Localidad
     * @example
     * // Get one Localidad
     * const localidad = await prisma.localidad.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LocalidadFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LocalidadFindUniqueArgs<ExtArgs>>
    ): Prisma__LocalidadClient<$Result.GetResult<Prisma.$LocalidadPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Localidad that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LocalidadFindUniqueOrThrowArgs} args - Arguments to find a Localidad
     * @example
     * // Get one Localidad
     * const localidad = await prisma.localidad.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LocalidadFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LocalidadFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LocalidadClient<$Result.GetResult<Prisma.$LocalidadPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Localidad that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocalidadFindFirstArgs} args - Arguments to find a Localidad
     * @example
     * // Get one Localidad
     * const localidad = await prisma.localidad.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LocalidadFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LocalidadFindFirstArgs<ExtArgs>>
    ): Prisma__LocalidadClient<$Result.GetResult<Prisma.$LocalidadPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Localidad that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocalidadFindFirstOrThrowArgs} args - Arguments to find a Localidad
     * @example
     * // Get one Localidad
     * const localidad = await prisma.localidad.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LocalidadFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LocalidadFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LocalidadClient<$Result.GetResult<Prisma.$LocalidadPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Localidads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocalidadFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Localidads
     * const localidads = await prisma.localidad.findMany()
     * 
     * // Get first 10 Localidads
     * const localidads = await prisma.localidad.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const localidadWithIdOnly = await prisma.localidad.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LocalidadFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocalidadFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocalidadPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Localidad.
     * @param {LocalidadCreateArgs} args - Arguments to create a Localidad.
     * @example
     * // Create one Localidad
     * const Localidad = await prisma.localidad.create({
     *   data: {
     *     // ... data to create a Localidad
     *   }
     * })
     * 
    **/
    create<T extends LocalidadCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LocalidadCreateArgs<ExtArgs>>
    ): Prisma__LocalidadClient<$Result.GetResult<Prisma.$LocalidadPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Localidads.
     *     @param {LocalidadCreateManyArgs} args - Arguments to create many Localidads.
     *     @example
     *     // Create many Localidads
     *     const localidad = await prisma.localidad.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LocalidadCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocalidadCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Localidad.
     * @param {LocalidadDeleteArgs} args - Arguments to delete one Localidad.
     * @example
     * // Delete one Localidad
     * const Localidad = await prisma.localidad.delete({
     *   where: {
     *     // ... filter to delete one Localidad
     *   }
     * })
     * 
    **/
    delete<T extends LocalidadDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LocalidadDeleteArgs<ExtArgs>>
    ): Prisma__LocalidadClient<$Result.GetResult<Prisma.$LocalidadPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Localidad.
     * @param {LocalidadUpdateArgs} args - Arguments to update one Localidad.
     * @example
     * // Update one Localidad
     * const localidad = await prisma.localidad.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LocalidadUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LocalidadUpdateArgs<ExtArgs>>
    ): Prisma__LocalidadClient<$Result.GetResult<Prisma.$LocalidadPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Localidads.
     * @param {LocalidadDeleteManyArgs} args - Arguments to filter Localidads to delete.
     * @example
     * // Delete a few Localidads
     * const { count } = await prisma.localidad.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LocalidadDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LocalidadDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Localidads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocalidadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Localidads
     * const localidad = await prisma.localidad.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LocalidadUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LocalidadUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Localidad.
     * @param {LocalidadUpsertArgs} args - Arguments to update or create a Localidad.
     * @example
     * // Update or create a Localidad
     * const localidad = await prisma.localidad.upsert({
     *   create: {
     *     // ... data to create a Localidad
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Localidad we want to update
     *   }
     * })
    **/
    upsert<T extends LocalidadUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LocalidadUpsertArgs<ExtArgs>>
    ): Prisma__LocalidadClient<$Result.GetResult<Prisma.$LocalidadPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Localidads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocalidadCountArgs} args - Arguments to filter Localidads to count.
     * @example
     * // Count the number of Localidads
     * const count = await prisma.localidad.count({
     *   where: {
     *     // ... the filter for the Localidads we want to count
     *   }
     * })
    **/
    count<T extends LocalidadCountArgs>(
      args?: Subset<T, LocalidadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocalidadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Localidad.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocalidadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocalidadAggregateArgs>(args: Subset<T, LocalidadAggregateArgs>): Prisma.PrismaPromise<GetLocalidadAggregateType<T>>

    /**
     * Group by Localidad.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocalidadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocalidadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocalidadGroupByArgs['orderBy'] }
        : { orderBy?: LocalidadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocalidadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocalidadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Localidad model
   */
  readonly fields: LocalidadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Localidad.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocalidadClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Institucion<T extends Localidad$InstitucionArgs<ExtArgs> = {}>(args?: Subset<T, Localidad$InstitucionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OficinaPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Localidad model
   */ 
  interface LocalidadFieldRefs {
    readonly id: FieldRef<"Localidad", 'Int'>
    readonly nombre: FieldRef<"Localidad", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Localidad findUnique
   */
  export type LocalidadFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Localidad
     */
    select?: LocalidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocalidadInclude<ExtArgs> | null
    /**
     * Filter, which Localidad to fetch.
     */
    where: LocalidadWhereUniqueInput
  }


  /**
   * Localidad findUniqueOrThrow
   */
  export type LocalidadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Localidad
     */
    select?: LocalidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocalidadInclude<ExtArgs> | null
    /**
     * Filter, which Localidad to fetch.
     */
    where: LocalidadWhereUniqueInput
  }


  /**
   * Localidad findFirst
   */
  export type LocalidadFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Localidad
     */
    select?: LocalidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocalidadInclude<ExtArgs> | null
    /**
     * Filter, which Localidad to fetch.
     */
    where?: LocalidadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Localidads to fetch.
     */
    orderBy?: LocalidadOrderByWithRelationInput | LocalidadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Localidads.
     */
    cursor?: LocalidadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Localidads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Localidads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Localidads.
     */
    distinct?: LocalidadScalarFieldEnum | LocalidadScalarFieldEnum[]
  }


  /**
   * Localidad findFirstOrThrow
   */
  export type LocalidadFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Localidad
     */
    select?: LocalidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocalidadInclude<ExtArgs> | null
    /**
     * Filter, which Localidad to fetch.
     */
    where?: LocalidadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Localidads to fetch.
     */
    orderBy?: LocalidadOrderByWithRelationInput | LocalidadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Localidads.
     */
    cursor?: LocalidadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Localidads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Localidads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Localidads.
     */
    distinct?: LocalidadScalarFieldEnum | LocalidadScalarFieldEnum[]
  }


  /**
   * Localidad findMany
   */
  export type LocalidadFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Localidad
     */
    select?: LocalidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocalidadInclude<ExtArgs> | null
    /**
     * Filter, which Localidads to fetch.
     */
    where?: LocalidadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Localidads to fetch.
     */
    orderBy?: LocalidadOrderByWithRelationInput | LocalidadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Localidads.
     */
    cursor?: LocalidadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Localidads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Localidads.
     */
    skip?: number
    distinct?: LocalidadScalarFieldEnum | LocalidadScalarFieldEnum[]
  }


  /**
   * Localidad create
   */
  export type LocalidadCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Localidad
     */
    select?: LocalidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocalidadInclude<ExtArgs> | null
    /**
     * The data needed to create a Localidad.
     */
    data: XOR<LocalidadCreateInput, LocalidadUncheckedCreateInput>
  }


  /**
   * Localidad createMany
   */
  export type LocalidadCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Localidads.
     */
    data: LocalidadCreateManyInput | LocalidadCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Localidad update
   */
  export type LocalidadUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Localidad
     */
    select?: LocalidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocalidadInclude<ExtArgs> | null
    /**
     * The data needed to update a Localidad.
     */
    data: XOR<LocalidadUpdateInput, LocalidadUncheckedUpdateInput>
    /**
     * Choose, which Localidad to update.
     */
    where: LocalidadWhereUniqueInput
  }


  /**
   * Localidad updateMany
   */
  export type LocalidadUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Localidads.
     */
    data: XOR<LocalidadUpdateManyMutationInput, LocalidadUncheckedUpdateManyInput>
    /**
     * Filter which Localidads to update
     */
    where?: LocalidadWhereInput
  }


  /**
   * Localidad upsert
   */
  export type LocalidadUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Localidad
     */
    select?: LocalidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocalidadInclude<ExtArgs> | null
    /**
     * The filter to search for the Localidad to update in case it exists.
     */
    where: LocalidadWhereUniqueInput
    /**
     * In case the Localidad found by the `where` argument doesn't exist, create a new Localidad with this data.
     */
    create: XOR<LocalidadCreateInput, LocalidadUncheckedCreateInput>
    /**
     * In case the Localidad was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocalidadUpdateInput, LocalidadUncheckedUpdateInput>
  }


  /**
   * Localidad delete
   */
  export type LocalidadDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Localidad
     */
    select?: LocalidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocalidadInclude<ExtArgs> | null
    /**
     * Filter which Localidad to delete.
     */
    where: LocalidadWhereUniqueInput
  }


  /**
   * Localidad deleteMany
   */
  export type LocalidadDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Localidads to delete
     */
    where?: LocalidadWhereInput
  }


  /**
   * Localidad.Institucion
   */
  export type Localidad$InstitucionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oficina
     */
    select?: OficinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OficinaInclude<ExtArgs> | null
    where?: OficinaWhereInput
    orderBy?: OficinaOrderByWithRelationInput | OficinaOrderByWithRelationInput[]
    cursor?: OficinaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OficinaScalarFieldEnum | OficinaScalarFieldEnum[]
  }


  /**
   * Localidad without action
   */
  export type LocalidadDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Localidad
     */
    select?: LocalidadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LocalidadInclude<ExtArgs> | null
  }



  /**
   * Model Institucion
   */

  export type AggregateInstitucion = {
    _count: InstitucionCountAggregateOutputType | null
    _avg: InstitucionAvgAggregateOutputType | null
    _sum: InstitucionSumAggregateOutputType | null
    _min: InstitucionMinAggregateOutputType | null
    _max: InstitucionMaxAggregateOutputType | null
  }

  export type InstitucionAvgAggregateOutputType = {
    id: number | null
  }

  export type InstitucionSumAggregateOutputType = {
    id: number | null
  }

  export type InstitucionMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    dominio: string | null
  }

  export type InstitucionMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    dominio: string | null
  }

  export type InstitucionCountAggregateOutputType = {
    id: number
    nombre: number
    dominio: number
    _all: number
  }


  export type InstitucionAvgAggregateInputType = {
    id?: true
  }

  export type InstitucionSumAggregateInputType = {
    id?: true
  }

  export type InstitucionMinAggregateInputType = {
    id?: true
    nombre?: true
    dominio?: true
  }

  export type InstitucionMaxAggregateInputType = {
    id?: true
    nombre?: true
    dominio?: true
  }

  export type InstitucionCountAggregateInputType = {
    id?: true
    nombre?: true
    dominio?: true
    _all?: true
  }

  export type InstitucionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Institucion to aggregate.
     */
    where?: InstitucionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Institucions to fetch.
     */
    orderBy?: InstitucionOrderByWithRelationInput | InstitucionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InstitucionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Institucions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Institucions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Institucions
    **/
    _count?: true | InstitucionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InstitucionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InstitucionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstitucionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstitucionMaxAggregateInputType
  }

  export type GetInstitucionAggregateType<T extends InstitucionAggregateArgs> = {
        [P in keyof T & keyof AggregateInstitucion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstitucion[P]>
      : GetScalarType<T[P], AggregateInstitucion[P]>
  }




  export type InstitucionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: InstitucionWhereInput
    orderBy?: InstitucionOrderByWithAggregationInput | InstitucionOrderByWithAggregationInput[]
    by: InstitucionScalarFieldEnum[] | InstitucionScalarFieldEnum
    having?: InstitucionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstitucionCountAggregateInputType | true
    _avg?: InstitucionAvgAggregateInputType
    _sum?: InstitucionSumAggregateInputType
    _min?: InstitucionMinAggregateInputType
    _max?: InstitucionMaxAggregateInputType
  }

  export type InstitucionGroupByOutputType = {
    id: number
    nombre: string
    dominio: string
    _count: InstitucionCountAggregateOutputType | null
    _avg: InstitucionAvgAggregateOutputType | null
    _sum: InstitucionSumAggregateOutputType | null
    _min: InstitucionMinAggregateOutputType | null
    _max: InstitucionMaxAggregateOutputType | null
  }

  type GetInstitucionGroupByPayload<T extends InstitucionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InstitucionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InstitucionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InstitucionGroupByOutputType[P]>
            : GetScalarType<T[P], InstitucionGroupByOutputType[P]>
        }
      >
    >


  export type InstitucionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    dominio?: boolean
    oficinas?: boolean | Institucion$oficinasArgs<ExtArgs>
    _count?: boolean | InstitucionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["institucion"]>

  export type InstitucionSelectScalar = {
    id?: boolean
    nombre?: boolean
    dominio?: boolean
  }

  export type InstitucionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    oficinas?: boolean | Institucion$oficinasArgs<ExtArgs>
    _count?: boolean | InstitucionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $InstitucionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Institucion"
    objects: {
      oficinas: Prisma.$OficinaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      nombre: string
      dominio: string
    }, ExtArgs["result"]["institucion"]>
    composites: {}
  }


  type InstitucionGetPayload<S extends boolean | null | undefined | InstitucionDefaultArgs> = $Result.GetResult<Prisma.$InstitucionPayload, S>

  type InstitucionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<InstitucionFindManyArgs, 'select' | 'include'> & {
      select?: InstitucionCountAggregateInputType | true
    }

  export interface InstitucionDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Institucion'], meta: { name: 'Institucion' } }
    /**
     * Find zero or one Institucion that matches the filter.
     * @param {InstitucionFindUniqueArgs} args - Arguments to find a Institucion
     * @example
     * // Get one Institucion
     * const institucion = await prisma.institucion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InstitucionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, InstitucionFindUniqueArgs<ExtArgs>>
    ): Prisma__InstitucionClient<$Result.GetResult<Prisma.$InstitucionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Institucion that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InstitucionFindUniqueOrThrowArgs} args - Arguments to find a Institucion
     * @example
     * // Get one Institucion
     * const institucion = await prisma.institucion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InstitucionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InstitucionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__InstitucionClient<$Result.GetResult<Prisma.$InstitucionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Institucion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitucionFindFirstArgs} args - Arguments to find a Institucion
     * @example
     * // Get one Institucion
     * const institucion = await prisma.institucion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InstitucionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, InstitucionFindFirstArgs<ExtArgs>>
    ): Prisma__InstitucionClient<$Result.GetResult<Prisma.$InstitucionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Institucion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitucionFindFirstOrThrowArgs} args - Arguments to find a Institucion
     * @example
     * // Get one Institucion
     * const institucion = await prisma.institucion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InstitucionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InstitucionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__InstitucionClient<$Result.GetResult<Prisma.$InstitucionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Institucions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitucionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Institucions
     * const institucions = await prisma.institucion.findMany()
     * 
     * // Get first 10 Institucions
     * const institucions = await prisma.institucion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const institucionWithIdOnly = await prisma.institucion.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InstitucionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InstitucionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstitucionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Institucion.
     * @param {InstitucionCreateArgs} args - Arguments to create a Institucion.
     * @example
     * // Create one Institucion
     * const Institucion = await prisma.institucion.create({
     *   data: {
     *     // ... data to create a Institucion
     *   }
     * })
     * 
    **/
    create<T extends InstitucionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, InstitucionCreateArgs<ExtArgs>>
    ): Prisma__InstitucionClient<$Result.GetResult<Prisma.$InstitucionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Institucions.
     *     @param {InstitucionCreateManyArgs} args - Arguments to create many Institucions.
     *     @example
     *     // Create many Institucions
     *     const institucion = await prisma.institucion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InstitucionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InstitucionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Institucion.
     * @param {InstitucionDeleteArgs} args - Arguments to delete one Institucion.
     * @example
     * // Delete one Institucion
     * const Institucion = await prisma.institucion.delete({
     *   where: {
     *     // ... filter to delete one Institucion
     *   }
     * })
     * 
    **/
    delete<T extends InstitucionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, InstitucionDeleteArgs<ExtArgs>>
    ): Prisma__InstitucionClient<$Result.GetResult<Prisma.$InstitucionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Institucion.
     * @param {InstitucionUpdateArgs} args - Arguments to update one Institucion.
     * @example
     * // Update one Institucion
     * const institucion = await prisma.institucion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InstitucionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, InstitucionUpdateArgs<ExtArgs>>
    ): Prisma__InstitucionClient<$Result.GetResult<Prisma.$InstitucionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Institucions.
     * @param {InstitucionDeleteManyArgs} args - Arguments to filter Institucions to delete.
     * @example
     * // Delete a few Institucions
     * const { count } = await prisma.institucion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InstitucionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InstitucionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Institucions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitucionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Institucions
     * const institucion = await prisma.institucion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InstitucionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, InstitucionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Institucion.
     * @param {InstitucionUpsertArgs} args - Arguments to update or create a Institucion.
     * @example
     * // Update or create a Institucion
     * const institucion = await prisma.institucion.upsert({
     *   create: {
     *     // ... data to create a Institucion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Institucion we want to update
     *   }
     * })
    **/
    upsert<T extends InstitucionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, InstitucionUpsertArgs<ExtArgs>>
    ): Prisma__InstitucionClient<$Result.GetResult<Prisma.$InstitucionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Institucions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitucionCountArgs} args - Arguments to filter Institucions to count.
     * @example
     * // Count the number of Institucions
     * const count = await prisma.institucion.count({
     *   where: {
     *     // ... the filter for the Institucions we want to count
     *   }
     * })
    **/
    count<T extends InstitucionCountArgs>(
      args?: Subset<T, InstitucionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstitucionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Institucion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitucionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstitucionAggregateArgs>(args: Subset<T, InstitucionAggregateArgs>): Prisma.PrismaPromise<GetInstitucionAggregateType<T>>

    /**
     * Group by Institucion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitucionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InstitucionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InstitucionGroupByArgs['orderBy'] }
        : { orderBy?: InstitucionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InstitucionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstitucionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Institucion model
   */
  readonly fields: InstitucionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Institucion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InstitucionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    oficinas<T extends Institucion$oficinasArgs<ExtArgs> = {}>(args?: Subset<T, Institucion$oficinasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OficinaPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Institucion model
   */ 
  interface InstitucionFieldRefs {
    readonly id: FieldRef<"Institucion", 'Int'>
    readonly nombre: FieldRef<"Institucion", 'String'>
    readonly dominio: FieldRef<"Institucion", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Institucion findUnique
   */
  export type InstitucionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institucion
     */
    select?: InstitucionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitucionInclude<ExtArgs> | null
    /**
     * Filter, which Institucion to fetch.
     */
    where: InstitucionWhereUniqueInput
  }


  /**
   * Institucion findUniqueOrThrow
   */
  export type InstitucionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institucion
     */
    select?: InstitucionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitucionInclude<ExtArgs> | null
    /**
     * Filter, which Institucion to fetch.
     */
    where: InstitucionWhereUniqueInput
  }


  /**
   * Institucion findFirst
   */
  export type InstitucionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institucion
     */
    select?: InstitucionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitucionInclude<ExtArgs> | null
    /**
     * Filter, which Institucion to fetch.
     */
    where?: InstitucionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Institucions to fetch.
     */
    orderBy?: InstitucionOrderByWithRelationInput | InstitucionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Institucions.
     */
    cursor?: InstitucionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Institucions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Institucions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Institucions.
     */
    distinct?: InstitucionScalarFieldEnum | InstitucionScalarFieldEnum[]
  }


  /**
   * Institucion findFirstOrThrow
   */
  export type InstitucionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institucion
     */
    select?: InstitucionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitucionInclude<ExtArgs> | null
    /**
     * Filter, which Institucion to fetch.
     */
    where?: InstitucionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Institucions to fetch.
     */
    orderBy?: InstitucionOrderByWithRelationInput | InstitucionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Institucions.
     */
    cursor?: InstitucionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Institucions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Institucions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Institucions.
     */
    distinct?: InstitucionScalarFieldEnum | InstitucionScalarFieldEnum[]
  }


  /**
   * Institucion findMany
   */
  export type InstitucionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institucion
     */
    select?: InstitucionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitucionInclude<ExtArgs> | null
    /**
     * Filter, which Institucions to fetch.
     */
    where?: InstitucionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Institucions to fetch.
     */
    orderBy?: InstitucionOrderByWithRelationInput | InstitucionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Institucions.
     */
    cursor?: InstitucionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Institucions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Institucions.
     */
    skip?: number
    distinct?: InstitucionScalarFieldEnum | InstitucionScalarFieldEnum[]
  }


  /**
   * Institucion create
   */
  export type InstitucionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institucion
     */
    select?: InstitucionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitucionInclude<ExtArgs> | null
    /**
     * The data needed to create a Institucion.
     */
    data: XOR<InstitucionCreateInput, InstitucionUncheckedCreateInput>
  }


  /**
   * Institucion createMany
   */
  export type InstitucionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Institucions.
     */
    data: InstitucionCreateManyInput | InstitucionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Institucion update
   */
  export type InstitucionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institucion
     */
    select?: InstitucionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitucionInclude<ExtArgs> | null
    /**
     * The data needed to update a Institucion.
     */
    data: XOR<InstitucionUpdateInput, InstitucionUncheckedUpdateInput>
    /**
     * Choose, which Institucion to update.
     */
    where: InstitucionWhereUniqueInput
  }


  /**
   * Institucion updateMany
   */
  export type InstitucionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Institucions.
     */
    data: XOR<InstitucionUpdateManyMutationInput, InstitucionUncheckedUpdateManyInput>
    /**
     * Filter which Institucions to update
     */
    where?: InstitucionWhereInput
  }


  /**
   * Institucion upsert
   */
  export type InstitucionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institucion
     */
    select?: InstitucionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitucionInclude<ExtArgs> | null
    /**
     * The filter to search for the Institucion to update in case it exists.
     */
    where: InstitucionWhereUniqueInput
    /**
     * In case the Institucion found by the `where` argument doesn't exist, create a new Institucion with this data.
     */
    create: XOR<InstitucionCreateInput, InstitucionUncheckedCreateInput>
    /**
     * In case the Institucion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InstitucionUpdateInput, InstitucionUncheckedUpdateInput>
  }


  /**
   * Institucion delete
   */
  export type InstitucionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institucion
     */
    select?: InstitucionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitucionInclude<ExtArgs> | null
    /**
     * Filter which Institucion to delete.
     */
    where: InstitucionWhereUniqueInput
  }


  /**
   * Institucion deleteMany
   */
  export type InstitucionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Institucions to delete
     */
    where?: InstitucionWhereInput
  }


  /**
   * Institucion.oficinas
   */
  export type Institucion$oficinasArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oficina
     */
    select?: OficinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OficinaInclude<ExtArgs> | null
    where?: OficinaWhereInput
    orderBy?: OficinaOrderByWithRelationInput | OficinaOrderByWithRelationInput[]
    cursor?: OficinaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OficinaScalarFieldEnum | OficinaScalarFieldEnum[]
  }


  /**
   * Institucion without action
   */
  export type InstitucionDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institucion
     */
    select?: InstitucionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitucionInclude<ExtArgs> | null
  }



  /**
   * Model Oficina
   */

  export type AggregateOficina = {
    _count: OficinaCountAggregateOutputType | null
    _avg: OficinaAvgAggregateOutputType | null
    _sum: OficinaSumAggregateOutputType | null
    _min: OficinaMinAggregateOutputType | null
    _max: OficinaMaxAggregateOutputType | null
  }

  export type OficinaAvgAggregateOutputType = {
    id: number | null
    piso: number | null
    idLocalidad: number | null
    idInstitucion: number | null
  }

  export type OficinaSumAggregateOutputType = {
    id: number | null
    piso: number | null
    idLocalidad: number | null
    idInstitucion: number | null
  }

  export type OficinaMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    direccion: string | null
    piso: number | null
    idLocalidad: number | null
    idInstitucion: number | null
  }

  export type OficinaMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    direccion: string | null
    piso: number | null
    idLocalidad: number | null
    idInstitucion: number | null
  }

  export type OficinaCountAggregateOutputType = {
    id: number
    nombre: number
    direccion: number
    piso: number
    idLocalidad: number
    idInstitucion: number
    _all: number
  }


  export type OficinaAvgAggregateInputType = {
    id?: true
    piso?: true
    idLocalidad?: true
    idInstitucion?: true
  }

  export type OficinaSumAggregateInputType = {
    id?: true
    piso?: true
    idLocalidad?: true
    idInstitucion?: true
  }

  export type OficinaMinAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    piso?: true
    idLocalidad?: true
    idInstitucion?: true
  }

  export type OficinaMaxAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    piso?: true
    idLocalidad?: true
    idInstitucion?: true
  }

  export type OficinaCountAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    piso?: true
    idLocalidad?: true
    idInstitucion?: true
    _all?: true
  }

  export type OficinaAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Oficina to aggregate.
     */
    where?: OficinaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Oficinas to fetch.
     */
    orderBy?: OficinaOrderByWithRelationInput | OficinaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OficinaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Oficinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Oficinas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Oficinas
    **/
    _count?: true | OficinaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OficinaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OficinaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OficinaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OficinaMaxAggregateInputType
  }

  export type GetOficinaAggregateType<T extends OficinaAggregateArgs> = {
        [P in keyof T & keyof AggregateOficina]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOficina[P]>
      : GetScalarType<T[P], AggregateOficina[P]>
  }




  export type OficinaGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: OficinaWhereInput
    orderBy?: OficinaOrderByWithAggregationInput | OficinaOrderByWithAggregationInput[]
    by: OficinaScalarFieldEnum[] | OficinaScalarFieldEnum
    having?: OficinaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OficinaCountAggregateInputType | true
    _avg?: OficinaAvgAggregateInputType
    _sum?: OficinaSumAggregateInputType
    _min?: OficinaMinAggregateInputType
    _max?: OficinaMaxAggregateInputType
  }

  export type OficinaGroupByOutputType = {
    id: number
    nombre: string
    direccion: string
    piso: number | null
    idLocalidad: number
    idInstitucion: number
    _count: OficinaCountAggregateOutputType | null
    _avg: OficinaAvgAggregateOutputType | null
    _sum: OficinaSumAggregateOutputType | null
    _min: OficinaMinAggregateOutputType | null
    _max: OficinaMaxAggregateOutputType | null
  }

  type GetOficinaGroupByPayload<T extends OficinaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OficinaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OficinaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OficinaGroupByOutputType[P]>
            : GetScalarType<T[P], OficinaGroupByOutputType[P]>
        }
      >
    >


  export type OficinaSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    piso?: boolean
    idLocalidad?: boolean
    idInstitucion?: boolean
    Localidad?: boolean | LocalidadDefaultArgs<ExtArgs>
    Institucion?: boolean | InstitucionDefaultArgs<ExtArgs>
    usuarios?: boolean | Oficina$usuariosArgs<ExtArgs>
    _count?: boolean | OficinaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["oficina"]>

  export type OficinaSelectScalar = {
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    piso?: boolean
    idLocalidad?: boolean
    idInstitucion?: boolean
  }

  export type OficinaInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Localidad?: boolean | LocalidadDefaultArgs<ExtArgs>
    Institucion?: boolean | InstitucionDefaultArgs<ExtArgs>
    usuarios?: boolean | Oficina$usuariosArgs<ExtArgs>
    _count?: boolean | OficinaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $OficinaPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Oficina"
    objects: {
      Localidad: Prisma.$LocalidadPayload<ExtArgs>
      Institucion: Prisma.$InstitucionPayload<ExtArgs>
      usuarios: Prisma.$UsuarioPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      nombre: string
      direccion: string
      piso: number | null
      idLocalidad: number
      idInstitucion: number
    }, ExtArgs["result"]["oficina"]>
    composites: {}
  }


  type OficinaGetPayload<S extends boolean | null | undefined | OficinaDefaultArgs> = $Result.GetResult<Prisma.$OficinaPayload, S>

  type OficinaCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<OficinaFindManyArgs, 'select' | 'include'> & {
      select?: OficinaCountAggregateInputType | true
    }

  export interface OficinaDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Oficina'], meta: { name: 'Oficina' } }
    /**
     * Find zero or one Oficina that matches the filter.
     * @param {OficinaFindUniqueArgs} args - Arguments to find a Oficina
     * @example
     * // Get one Oficina
     * const oficina = await prisma.oficina.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OficinaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OficinaFindUniqueArgs<ExtArgs>>
    ): Prisma__OficinaClient<$Result.GetResult<Prisma.$OficinaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Oficina that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OficinaFindUniqueOrThrowArgs} args - Arguments to find a Oficina
     * @example
     * // Get one Oficina
     * const oficina = await prisma.oficina.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OficinaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OficinaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OficinaClient<$Result.GetResult<Prisma.$OficinaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Oficina that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OficinaFindFirstArgs} args - Arguments to find a Oficina
     * @example
     * // Get one Oficina
     * const oficina = await prisma.oficina.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OficinaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OficinaFindFirstArgs<ExtArgs>>
    ): Prisma__OficinaClient<$Result.GetResult<Prisma.$OficinaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Oficina that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OficinaFindFirstOrThrowArgs} args - Arguments to find a Oficina
     * @example
     * // Get one Oficina
     * const oficina = await prisma.oficina.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OficinaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OficinaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OficinaClient<$Result.GetResult<Prisma.$OficinaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Oficinas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OficinaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Oficinas
     * const oficinas = await prisma.oficina.findMany()
     * 
     * // Get first 10 Oficinas
     * const oficinas = await prisma.oficina.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const oficinaWithIdOnly = await prisma.oficina.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OficinaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OficinaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OficinaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Oficina.
     * @param {OficinaCreateArgs} args - Arguments to create a Oficina.
     * @example
     * // Create one Oficina
     * const Oficina = await prisma.oficina.create({
     *   data: {
     *     // ... data to create a Oficina
     *   }
     * })
     * 
    **/
    create<T extends OficinaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OficinaCreateArgs<ExtArgs>>
    ): Prisma__OficinaClient<$Result.GetResult<Prisma.$OficinaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Oficinas.
     *     @param {OficinaCreateManyArgs} args - Arguments to create many Oficinas.
     *     @example
     *     // Create many Oficinas
     *     const oficina = await prisma.oficina.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OficinaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OficinaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Oficina.
     * @param {OficinaDeleteArgs} args - Arguments to delete one Oficina.
     * @example
     * // Delete one Oficina
     * const Oficina = await prisma.oficina.delete({
     *   where: {
     *     // ... filter to delete one Oficina
     *   }
     * })
     * 
    **/
    delete<T extends OficinaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OficinaDeleteArgs<ExtArgs>>
    ): Prisma__OficinaClient<$Result.GetResult<Prisma.$OficinaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Oficina.
     * @param {OficinaUpdateArgs} args - Arguments to update one Oficina.
     * @example
     * // Update one Oficina
     * const oficina = await prisma.oficina.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OficinaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OficinaUpdateArgs<ExtArgs>>
    ): Prisma__OficinaClient<$Result.GetResult<Prisma.$OficinaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Oficinas.
     * @param {OficinaDeleteManyArgs} args - Arguments to filter Oficinas to delete.
     * @example
     * // Delete a few Oficinas
     * const { count } = await prisma.oficina.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OficinaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OficinaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Oficinas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OficinaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Oficinas
     * const oficina = await prisma.oficina.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OficinaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OficinaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Oficina.
     * @param {OficinaUpsertArgs} args - Arguments to update or create a Oficina.
     * @example
     * // Update or create a Oficina
     * const oficina = await prisma.oficina.upsert({
     *   create: {
     *     // ... data to create a Oficina
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Oficina we want to update
     *   }
     * })
    **/
    upsert<T extends OficinaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OficinaUpsertArgs<ExtArgs>>
    ): Prisma__OficinaClient<$Result.GetResult<Prisma.$OficinaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Oficinas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OficinaCountArgs} args - Arguments to filter Oficinas to count.
     * @example
     * // Count the number of Oficinas
     * const count = await prisma.oficina.count({
     *   where: {
     *     // ... the filter for the Oficinas we want to count
     *   }
     * })
    **/
    count<T extends OficinaCountArgs>(
      args?: Subset<T, OficinaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OficinaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Oficina.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OficinaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OficinaAggregateArgs>(args: Subset<T, OficinaAggregateArgs>): Prisma.PrismaPromise<GetOficinaAggregateType<T>>

    /**
     * Group by Oficina.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OficinaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OficinaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OficinaGroupByArgs['orderBy'] }
        : { orderBy?: OficinaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OficinaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOficinaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Oficina model
   */
  readonly fields: OficinaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Oficina.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OficinaClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Localidad<T extends LocalidadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocalidadDefaultArgs<ExtArgs>>): Prisma__LocalidadClient<$Result.GetResult<Prisma.$LocalidadPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Institucion<T extends InstitucionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstitucionDefaultArgs<ExtArgs>>): Prisma__InstitucionClient<$Result.GetResult<Prisma.$InstitucionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    usuarios<T extends Oficina$usuariosArgs<ExtArgs> = {}>(args?: Subset<T, Oficina$usuariosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Oficina model
   */ 
  interface OficinaFieldRefs {
    readonly id: FieldRef<"Oficina", 'Int'>
    readonly nombre: FieldRef<"Oficina", 'String'>
    readonly direccion: FieldRef<"Oficina", 'String'>
    readonly piso: FieldRef<"Oficina", 'Int'>
    readonly idLocalidad: FieldRef<"Oficina", 'Int'>
    readonly idInstitucion: FieldRef<"Oficina", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Oficina findUnique
   */
  export type OficinaFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oficina
     */
    select?: OficinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OficinaInclude<ExtArgs> | null
    /**
     * Filter, which Oficina to fetch.
     */
    where: OficinaWhereUniqueInput
  }


  /**
   * Oficina findUniqueOrThrow
   */
  export type OficinaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oficina
     */
    select?: OficinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OficinaInclude<ExtArgs> | null
    /**
     * Filter, which Oficina to fetch.
     */
    where: OficinaWhereUniqueInput
  }


  /**
   * Oficina findFirst
   */
  export type OficinaFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oficina
     */
    select?: OficinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OficinaInclude<ExtArgs> | null
    /**
     * Filter, which Oficina to fetch.
     */
    where?: OficinaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Oficinas to fetch.
     */
    orderBy?: OficinaOrderByWithRelationInput | OficinaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Oficinas.
     */
    cursor?: OficinaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Oficinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Oficinas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Oficinas.
     */
    distinct?: OficinaScalarFieldEnum | OficinaScalarFieldEnum[]
  }


  /**
   * Oficina findFirstOrThrow
   */
  export type OficinaFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oficina
     */
    select?: OficinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OficinaInclude<ExtArgs> | null
    /**
     * Filter, which Oficina to fetch.
     */
    where?: OficinaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Oficinas to fetch.
     */
    orderBy?: OficinaOrderByWithRelationInput | OficinaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Oficinas.
     */
    cursor?: OficinaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Oficinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Oficinas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Oficinas.
     */
    distinct?: OficinaScalarFieldEnum | OficinaScalarFieldEnum[]
  }


  /**
   * Oficina findMany
   */
  export type OficinaFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oficina
     */
    select?: OficinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OficinaInclude<ExtArgs> | null
    /**
     * Filter, which Oficinas to fetch.
     */
    where?: OficinaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Oficinas to fetch.
     */
    orderBy?: OficinaOrderByWithRelationInput | OficinaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Oficinas.
     */
    cursor?: OficinaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Oficinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Oficinas.
     */
    skip?: number
    distinct?: OficinaScalarFieldEnum | OficinaScalarFieldEnum[]
  }


  /**
   * Oficina create
   */
  export type OficinaCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oficina
     */
    select?: OficinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OficinaInclude<ExtArgs> | null
    /**
     * The data needed to create a Oficina.
     */
    data: XOR<OficinaCreateInput, OficinaUncheckedCreateInput>
  }


  /**
   * Oficina createMany
   */
  export type OficinaCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Oficinas.
     */
    data: OficinaCreateManyInput | OficinaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Oficina update
   */
  export type OficinaUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oficina
     */
    select?: OficinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OficinaInclude<ExtArgs> | null
    /**
     * The data needed to update a Oficina.
     */
    data: XOR<OficinaUpdateInput, OficinaUncheckedUpdateInput>
    /**
     * Choose, which Oficina to update.
     */
    where: OficinaWhereUniqueInput
  }


  /**
   * Oficina updateMany
   */
  export type OficinaUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Oficinas.
     */
    data: XOR<OficinaUpdateManyMutationInput, OficinaUncheckedUpdateManyInput>
    /**
     * Filter which Oficinas to update
     */
    where?: OficinaWhereInput
  }


  /**
   * Oficina upsert
   */
  export type OficinaUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oficina
     */
    select?: OficinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OficinaInclude<ExtArgs> | null
    /**
     * The filter to search for the Oficina to update in case it exists.
     */
    where: OficinaWhereUniqueInput
    /**
     * In case the Oficina found by the `where` argument doesn't exist, create a new Oficina with this data.
     */
    create: XOR<OficinaCreateInput, OficinaUncheckedCreateInput>
    /**
     * In case the Oficina was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OficinaUpdateInput, OficinaUncheckedUpdateInput>
  }


  /**
   * Oficina delete
   */
  export type OficinaDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oficina
     */
    select?: OficinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OficinaInclude<ExtArgs> | null
    /**
     * Filter which Oficina to delete.
     */
    where: OficinaWhereUniqueInput
  }


  /**
   * Oficina deleteMany
   */
  export type OficinaDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Oficinas to delete
     */
    where?: OficinaWhereInput
  }


  /**
   * Oficina.usuarios
   */
  export type Oficina$usuariosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    cursor?: UsuarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * Oficina without action
   */
  export type OficinaDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Oficina
     */
    select?: OficinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OficinaInclude<ExtArgs> | null
  }



  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
    idOficina: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
    idOficina: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    correo: string | null
    idOficina: number | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    correo: string | null
    idOficina: number | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nombre: number
    correo: number
    idOficina: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
    idOficina?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
    idOficina?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    nombre?: true
    correo?: true
    idOficina?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nombre?: true
    correo?: true
    idOficina?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nombre?: true
    correo?: true
    idOficina?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    nombre: string
    correo: string
    idOficina: number
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    correo?: boolean
    idOficina?: boolean
    oficina?: boolean | OficinaDefaultArgs<ExtArgs>
    reportes?: boolean | Usuario$reportesArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    nombre?: boolean
    correo?: boolean
    idOficina?: boolean
  }

  export type UsuarioInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    oficina?: boolean | OficinaDefaultArgs<ExtArgs>
    reportes?: boolean | Usuario$reportesArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UsuarioPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      oficina: Prisma.$OficinaPayload<ExtArgs>
      reportes: Prisma.$ReportePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      nombre: string
      correo: string
      idOficina: number
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }


  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UsuarioFindManyArgs, 'select' | 'include'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsuarioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsuarioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsuarioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends UsuarioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Usuarios.
     *     @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuario = await prisma.usuario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsuarioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends UsuarioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsuarioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsuarioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsuarioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends UsuarioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>
    ): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    oficina<T extends OficinaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OficinaDefaultArgs<ExtArgs>>): Prisma__OficinaClient<$Result.GetResult<Prisma.$OficinaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    reportes<T extends Usuario$reportesArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$reportesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Usuario model
   */ 
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly nombre: FieldRef<"Usuario", 'String'>
    readonly correo: FieldRef<"Usuario", 'String'>
    readonly idOficina: FieldRef<"Usuario", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }


  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }


  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }


  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }


  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }


  /**
   * Usuario.reportes
   */
  export type Usuario$reportesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reporte
     */
    select?: ReporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReporteInclude<ExtArgs> | null
    where?: ReporteWhereInput
    orderBy?: ReporteOrderByWithRelationInput | ReporteOrderByWithRelationInput[]
    cursor?: ReporteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReporteScalarFieldEnum | ReporteScalarFieldEnum[]
  }


  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioInclude<ExtArgs> | null
  }



  /**
   * Model UsuarioTecnico
   */

  export type AggregateUsuarioTecnico = {
    _count: UsuarioTecnicoCountAggregateOutputType | null
    _avg: UsuarioTecnicoAvgAggregateOutputType | null
    _sum: UsuarioTecnicoSumAggregateOutputType | null
    _min: UsuarioTecnicoMinAggregateOutputType | null
    _max: UsuarioTecnicoMaxAggregateOutputType | null
  }

  export type UsuarioTecnicoAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioTecnicoSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioTecnicoMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    correo: string | null
  }

  export type UsuarioTecnicoMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    correo: string | null
  }

  export type UsuarioTecnicoCountAggregateOutputType = {
    id: number
    nombre: number
    correo: number
    _all: number
  }


  export type UsuarioTecnicoAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioTecnicoSumAggregateInputType = {
    id?: true
  }

  export type UsuarioTecnicoMinAggregateInputType = {
    id?: true
    nombre?: true
    correo?: true
  }

  export type UsuarioTecnicoMaxAggregateInputType = {
    id?: true
    nombre?: true
    correo?: true
  }

  export type UsuarioTecnicoCountAggregateInputType = {
    id?: true
    nombre?: true
    correo?: true
    _all?: true
  }

  export type UsuarioTecnicoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsuarioTecnico to aggregate.
     */
    where?: UsuarioTecnicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsuarioTecnicos to fetch.
     */
    orderBy?: UsuarioTecnicoOrderByWithRelationInput | UsuarioTecnicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioTecnicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsuarioTecnicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsuarioTecnicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UsuarioTecnicos
    **/
    _count?: true | UsuarioTecnicoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioTecnicoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioTecnicoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioTecnicoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioTecnicoMaxAggregateInputType
  }

  export type GetUsuarioTecnicoAggregateType<T extends UsuarioTecnicoAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarioTecnico]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarioTecnico[P]>
      : GetScalarType<T[P], AggregateUsuarioTecnico[P]>
  }




  export type UsuarioTecnicoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsuarioTecnicoWhereInput
    orderBy?: UsuarioTecnicoOrderByWithAggregationInput | UsuarioTecnicoOrderByWithAggregationInput[]
    by: UsuarioTecnicoScalarFieldEnum[] | UsuarioTecnicoScalarFieldEnum
    having?: UsuarioTecnicoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioTecnicoCountAggregateInputType | true
    _avg?: UsuarioTecnicoAvgAggregateInputType
    _sum?: UsuarioTecnicoSumAggregateInputType
    _min?: UsuarioTecnicoMinAggregateInputType
    _max?: UsuarioTecnicoMaxAggregateInputType
  }

  export type UsuarioTecnicoGroupByOutputType = {
    id: number
    nombre: string
    correo: string
    _count: UsuarioTecnicoCountAggregateOutputType | null
    _avg: UsuarioTecnicoAvgAggregateOutputType | null
    _sum: UsuarioTecnicoSumAggregateOutputType | null
    _min: UsuarioTecnicoMinAggregateOutputType | null
    _max: UsuarioTecnicoMaxAggregateOutputType | null
  }

  type GetUsuarioTecnicoGroupByPayload<T extends UsuarioTecnicoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioTecnicoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioTecnicoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioTecnicoGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioTecnicoGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioTecnicoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    correo?: boolean
    reportesSolucionados?: boolean | UsuarioTecnico$reportesSolucionadosArgs<ExtArgs>
    _count?: boolean | UsuarioTecnicoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuarioTecnico"]>

  export type UsuarioTecnicoSelectScalar = {
    id?: boolean
    nombre?: boolean
    correo?: boolean
  }

  export type UsuarioTecnicoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    reportesSolucionados?: boolean | UsuarioTecnico$reportesSolucionadosArgs<ExtArgs>
    _count?: boolean | UsuarioTecnicoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UsuarioTecnicoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "UsuarioTecnico"
    objects: {
      reportesSolucionados: Prisma.$ReportePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      nombre: string
      correo: string
    }, ExtArgs["result"]["usuarioTecnico"]>
    composites: {}
  }


  type UsuarioTecnicoGetPayload<S extends boolean | null | undefined | UsuarioTecnicoDefaultArgs> = $Result.GetResult<Prisma.$UsuarioTecnicoPayload, S>

  type UsuarioTecnicoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UsuarioTecnicoFindManyArgs, 'select' | 'include'> & {
      select?: UsuarioTecnicoCountAggregateInputType | true
    }

  export interface UsuarioTecnicoDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UsuarioTecnico'], meta: { name: 'UsuarioTecnico' } }
    /**
     * Find zero or one UsuarioTecnico that matches the filter.
     * @param {UsuarioTecnicoFindUniqueArgs} args - Arguments to find a UsuarioTecnico
     * @example
     * // Get one UsuarioTecnico
     * const usuarioTecnico = await prisma.usuarioTecnico.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsuarioTecnicoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioTecnicoFindUniqueArgs<ExtArgs>>
    ): Prisma__UsuarioTecnicoClient<$Result.GetResult<Prisma.$UsuarioTecnicoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UsuarioTecnico that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsuarioTecnicoFindUniqueOrThrowArgs} args - Arguments to find a UsuarioTecnico
     * @example
     * // Get one UsuarioTecnico
     * const usuarioTecnico = await prisma.usuarioTecnico.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsuarioTecnicoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioTecnicoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsuarioTecnicoClient<$Result.GetResult<Prisma.$UsuarioTecnicoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UsuarioTecnico that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioTecnicoFindFirstArgs} args - Arguments to find a UsuarioTecnico
     * @example
     * // Get one UsuarioTecnico
     * const usuarioTecnico = await prisma.usuarioTecnico.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsuarioTecnicoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioTecnicoFindFirstArgs<ExtArgs>>
    ): Prisma__UsuarioTecnicoClient<$Result.GetResult<Prisma.$UsuarioTecnicoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UsuarioTecnico that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioTecnicoFindFirstOrThrowArgs} args - Arguments to find a UsuarioTecnico
     * @example
     * // Get one UsuarioTecnico
     * const usuarioTecnico = await prisma.usuarioTecnico.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsuarioTecnicoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioTecnicoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsuarioTecnicoClient<$Result.GetResult<Prisma.$UsuarioTecnicoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UsuarioTecnicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioTecnicoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsuarioTecnicos
     * const usuarioTecnicos = await prisma.usuarioTecnico.findMany()
     * 
     * // Get first 10 UsuarioTecnicos
     * const usuarioTecnicos = await prisma.usuarioTecnico.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioTecnicoWithIdOnly = await prisma.usuarioTecnico.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsuarioTecnicoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioTecnicoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioTecnicoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UsuarioTecnico.
     * @param {UsuarioTecnicoCreateArgs} args - Arguments to create a UsuarioTecnico.
     * @example
     * // Create one UsuarioTecnico
     * const UsuarioTecnico = await prisma.usuarioTecnico.create({
     *   data: {
     *     // ... data to create a UsuarioTecnico
     *   }
     * })
     * 
    **/
    create<T extends UsuarioTecnicoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioTecnicoCreateArgs<ExtArgs>>
    ): Prisma__UsuarioTecnicoClient<$Result.GetResult<Prisma.$UsuarioTecnicoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UsuarioTecnicos.
     *     @param {UsuarioTecnicoCreateManyArgs} args - Arguments to create many UsuarioTecnicos.
     *     @example
     *     // Create many UsuarioTecnicos
     *     const usuarioTecnico = await prisma.usuarioTecnico.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsuarioTecnicoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioTecnicoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UsuarioTecnico.
     * @param {UsuarioTecnicoDeleteArgs} args - Arguments to delete one UsuarioTecnico.
     * @example
     * // Delete one UsuarioTecnico
     * const UsuarioTecnico = await prisma.usuarioTecnico.delete({
     *   where: {
     *     // ... filter to delete one UsuarioTecnico
     *   }
     * })
     * 
    **/
    delete<T extends UsuarioTecnicoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioTecnicoDeleteArgs<ExtArgs>>
    ): Prisma__UsuarioTecnicoClient<$Result.GetResult<Prisma.$UsuarioTecnicoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UsuarioTecnico.
     * @param {UsuarioTecnicoUpdateArgs} args - Arguments to update one UsuarioTecnico.
     * @example
     * // Update one UsuarioTecnico
     * const usuarioTecnico = await prisma.usuarioTecnico.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsuarioTecnicoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioTecnicoUpdateArgs<ExtArgs>>
    ): Prisma__UsuarioTecnicoClient<$Result.GetResult<Prisma.$UsuarioTecnicoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UsuarioTecnicos.
     * @param {UsuarioTecnicoDeleteManyArgs} args - Arguments to filter UsuarioTecnicos to delete.
     * @example
     * // Delete a few UsuarioTecnicos
     * const { count } = await prisma.usuarioTecnico.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsuarioTecnicoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioTecnicoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsuarioTecnicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioTecnicoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsuarioTecnicos
     * const usuarioTecnico = await prisma.usuarioTecnico.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsuarioTecnicoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioTecnicoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UsuarioTecnico.
     * @param {UsuarioTecnicoUpsertArgs} args - Arguments to update or create a UsuarioTecnico.
     * @example
     * // Update or create a UsuarioTecnico
     * const usuarioTecnico = await prisma.usuarioTecnico.upsert({
     *   create: {
     *     // ... data to create a UsuarioTecnico
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsuarioTecnico we want to update
     *   }
     * })
    **/
    upsert<T extends UsuarioTecnicoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioTecnicoUpsertArgs<ExtArgs>>
    ): Prisma__UsuarioTecnicoClient<$Result.GetResult<Prisma.$UsuarioTecnicoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UsuarioTecnicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioTecnicoCountArgs} args - Arguments to filter UsuarioTecnicos to count.
     * @example
     * // Count the number of UsuarioTecnicos
     * const count = await prisma.usuarioTecnico.count({
     *   where: {
     *     // ... the filter for the UsuarioTecnicos we want to count
     *   }
     * })
    **/
    count<T extends UsuarioTecnicoCountArgs>(
      args?: Subset<T, UsuarioTecnicoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioTecnicoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsuarioTecnico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioTecnicoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioTecnicoAggregateArgs>(args: Subset<T, UsuarioTecnicoAggregateArgs>): Prisma.PrismaPromise<GetUsuarioTecnicoAggregateType<T>>

    /**
     * Group by UsuarioTecnico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioTecnicoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioTecnicoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioTecnicoGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioTecnicoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioTecnicoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioTecnicoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UsuarioTecnico model
   */
  readonly fields: UsuarioTecnicoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UsuarioTecnico.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioTecnicoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    reportesSolucionados<T extends UsuarioTecnico$reportesSolucionadosArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioTecnico$reportesSolucionadosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UsuarioTecnico model
   */ 
  interface UsuarioTecnicoFieldRefs {
    readonly id: FieldRef<"UsuarioTecnico", 'Int'>
    readonly nombre: FieldRef<"UsuarioTecnico", 'String'>
    readonly correo: FieldRef<"UsuarioTecnico", 'String'>
  }
    

  // Custom InputTypes

  /**
   * UsuarioTecnico findUnique
   */
  export type UsuarioTecnicoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioTecnico
     */
    select?: UsuarioTecnicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioTecnicoInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioTecnico to fetch.
     */
    where: UsuarioTecnicoWhereUniqueInput
  }


  /**
   * UsuarioTecnico findUniqueOrThrow
   */
  export type UsuarioTecnicoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioTecnico
     */
    select?: UsuarioTecnicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioTecnicoInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioTecnico to fetch.
     */
    where: UsuarioTecnicoWhereUniqueInput
  }


  /**
   * UsuarioTecnico findFirst
   */
  export type UsuarioTecnicoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioTecnico
     */
    select?: UsuarioTecnicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioTecnicoInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioTecnico to fetch.
     */
    where?: UsuarioTecnicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsuarioTecnicos to fetch.
     */
    orderBy?: UsuarioTecnicoOrderByWithRelationInput | UsuarioTecnicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsuarioTecnicos.
     */
    cursor?: UsuarioTecnicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsuarioTecnicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsuarioTecnicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsuarioTecnicos.
     */
    distinct?: UsuarioTecnicoScalarFieldEnum | UsuarioTecnicoScalarFieldEnum[]
  }


  /**
   * UsuarioTecnico findFirstOrThrow
   */
  export type UsuarioTecnicoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioTecnico
     */
    select?: UsuarioTecnicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioTecnicoInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioTecnico to fetch.
     */
    where?: UsuarioTecnicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsuarioTecnicos to fetch.
     */
    orderBy?: UsuarioTecnicoOrderByWithRelationInput | UsuarioTecnicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsuarioTecnicos.
     */
    cursor?: UsuarioTecnicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsuarioTecnicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsuarioTecnicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsuarioTecnicos.
     */
    distinct?: UsuarioTecnicoScalarFieldEnum | UsuarioTecnicoScalarFieldEnum[]
  }


  /**
   * UsuarioTecnico findMany
   */
  export type UsuarioTecnicoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioTecnico
     */
    select?: UsuarioTecnicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioTecnicoInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioTecnicos to fetch.
     */
    where?: UsuarioTecnicoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsuarioTecnicos to fetch.
     */
    orderBy?: UsuarioTecnicoOrderByWithRelationInput | UsuarioTecnicoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UsuarioTecnicos.
     */
    cursor?: UsuarioTecnicoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsuarioTecnicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsuarioTecnicos.
     */
    skip?: number
    distinct?: UsuarioTecnicoScalarFieldEnum | UsuarioTecnicoScalarFieldEnum[]
  }


  /**
   * UsuarioTecnico create
   */
  export type UsuarioTecnicoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioTecnico
     */
    select?: UsuarioTecnicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioTecnicoInclude<ExtArgs> | null
    /**
     * The data needed to create a UsuarioTecnico.
     */
    data: XOR<UsuarioTecnicoCreateInput, UsuarioTecnicoUncheckedCreateInput>
  }


  /**
   * UsuarioTecnico createMany
   */
  export type UsuarioTecnicoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UsuarioTecnicos.
     */
    data: UsuarioTecnicoCreateManyInput | UsuarioTecnicoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * UsuarioTecnico update
   */
  export type UsuarioTecnicoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioTecnico
     */
    select?: UsuarioTecnicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioTecnicoInclude<ExtArgs> | null
    /**
     * The data needed to update a UsuarioTecnico.
     */
    data: XOR<UsuarioTecnicoUpdateInput, UsuarioTecnicoUncheckedUpdateInput>
    /**
     * Choose, which UsuarioTecnico to update.
     */
    where: UsuarioTecnicoWhereUniqueInput
  }


  /**
   * UsuarioTecnico updateMany
   */
  export type UsuarioTecnicoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UsuarioTecnicos.
     */
    data: XOR<UsuarioTecnicoUpdateManyMutationInput, UsuarioTecnicoUncheckedUpdateManyInput>
    /**
     * Filter which UsuarioTecnicos to update
     */
    where?: UsuarioTecnicoWhereInput
  }


  /**
   * UsuarioTecnico upsert
   */
  export type UsuarioTecnicoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioTecnico
     */
    select?: UsuarioTecnicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioTecnicoInclude<ExtArgs> | null
    /**
     * The filter to search for the UsuarioTecnico to update in case it exists.
     */
    where: UsuarioTecnicoWhereUniqueInput
    /**
     * In case the UsuarioTecnico found by the `where` argument doesn't exist, create a new UsuarioTecnico with this data.
     */
    create: XOR<UsuarioTecnicoCreateInput, UsuarioTecnicoUncheckedCreateInput>
    /**
     * In case the UsuarioTecnico was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioTecnicoUpdateInput, UsuarioTecnicoUncheckedUpdateInput>
  }


  /**
   * UsuarioTecnico delete
   */
  export type UsuarioTecnicoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioTecnico
     */
    select?: UsuarioTecnicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioTecnicoInclude<ExtArgs> | null
    /**
     * Filter which UsuarioTecnico to delete.
     */
    where: UsuarioTecnicoWhereUniqueInput
  }


  /**
   * UsuarioTecnico deleteMany
   */
  export type UsuarioTecnicoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsuarioTecnicos to delete
     */
    where?: UsuarioTecnicoWhereInput
  }


  /**
   * UsuarioTecnico.reportesSolucionados
   */
  export type UsuarioTecnico$reportesSolucionadosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reporte
     */
    select?: ReporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReporteInclude<ExtArgs> | null
    where?: ReporteWhereInput
    orderBy?: ReporteOrderByWithRelationInput | ReporteOrderByWithRelationInput[]
    cursor?: ReporteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReporteScalarFieldEnum | ReporteScalarFieldEnum[]
  }


  /**
   * UsuarioTecnico without action
   */
  export type UsuarioTecnicoDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioTecnico
     */
    select?: UsuarioTecnicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioTecnicoInclude<ExtArgs> | null
  }



  /**
   * Model UsuarioSupervisor
   */

  export type AggregateUsuarioSupervisor = {
    _count: UsuarioSupervisorCountAggregateOutputType | null
    _avg: UsuarioSupervisorAvgAggregateOutputType | null
    _sum: UsuarioSupervisorSumAggregateOutputType | null
    _min: UsuarioSupervisorMinAggregateOutputType | null
    _max: UsuarioSupervisorMaxAggregateOutputType | null
  }

  export type UsuarioSupervisorAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSupervisorSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSupervisorMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    correo: string | null
  }

  export type UsuarioSupervisorMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    correo: string | null
  }

  export type UsuarioSupervisorCountAggregateOutputType = {
    id: number
    nombre: number
    correo: number
    _all: number
  }


  export type UsuarioSupervisorAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioSupervisorSumAggregateInputType = {
    id?: true
  }

  export type UsuarioSupervisorMinAggregateInputType = {
    id?: true
    nombre?: true
    correo?: true
  }

  export type UsuarioSupervisorMaxAggregateInputType = {
    id?: true
    nombre?: true
    correo?: true
  }

  export type UsuarioSupervisorCountAggregateInputType = {
    id?: true
    nombre?: true
    correo?: true
    _all?: true
  }

  export type UsuarioSupervisorAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsuarioSupervisor to aggregate.
     */
    where?: UsuarioSupervisorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsuarioSupervisors to fetch.
     */
    orderBy?: UsuarioSupervisorOrderByWithRelationInput | UsuarioSupervisorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioSupervisorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsuarioSupervisors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsuarioSupervisors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UsuarioSupervisors
    **/
    _count?: true | UsuarioSupervisorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioSupervisorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSupervisorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioSupervisorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioSupervisorMaxAggregateInputType
  }

  export type GetUsuarioSupervisorAggregateType<T extends UsuarioSupervisorAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarioSupervisor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarioSupervisor[P]>
      : GetScalarType<T[P], AggregateUsuarioSupervisor[P]>
  }




  export type UsuarioSupervisorGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsuarioSupervisorWhereInput
    orderBy?: UsuarioSupervisorOrderByWithAggregationInput | UsuarioSupervisorOrderByWithAggregationInput[]
    by: UsuarioSupervisorScalarFieldEnum[] | UsuarioSupervisorScalarFieldEnum
    having?: UsuarioSupervisorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioSupervisorCountAggregateInputType | true
    _avg?: UsuarioSupervisorAvgAggregateInputType
    _sum?: UsuarioSupervisorSumAggregateInputType
    _min?: UsuarioSupervisorMinAggregateInputType
    _max?: UsuarioSupervisorMaxAggregateInputType
  }

  export type UsuarioSupervisorGroupByOutputType = {
    id: number
    nombre: string
    correo: string
    _count: UsuarioSupervisorCountAggregateOutputType | null
    _avg: UsuarioSupervisorAvgAggregateOutputType | null
    _sum: UsuarioSupervisorSumAggregateOutputType | null
    _min: UsuarioSupervisorMinAggregateOutputType | null
    _max: UsuarioSupervisorMaxAggregateOutputType | null
  }

  type GetUsuarioSupervisorGroupByPayload<T extends UsuarioSupervisorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioSupervisorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioSupervisorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioSupervisorGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioSupervisorGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSupervisorSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    correo?: boolean
    reportesSupervisados?: boolean | UsuarioSupervisor$reportesSupervisadosArgs<ExtArgs>
    _count?: boolean | UsuarioSupervisorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuarioSupervisor"]>

  export type UsuarioSupervisorSelectScalar = {
    id?: boolean
    nombre?: boolean
    correo?: boolean
  }

  export type UsuarioSupervisorInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    reportesSupervisados?: boolean | UsuarioSupervisor$reportesSupervisadosArgs<ExtArgs>
    _count?: boolean | UsuarioSupervisorCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UsuarioSupervisorPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "UsuarioSupervisor"
    objects: {
      reportesSupervisados: Prisma.$ReportePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      nombre: string
      correo: string
    }, ExtArgs["result"]["usuarioSupervisor"]>
    composites: {}
  }


  type UsuarioSupervisorGetPayload<S extends boolean | null | undefined | UsuarioSupervisorDefaultArgs> = $Result.GetResult<Prisma.$UsuarioSupervisorPayload, S>

  type UsuarioSupervisorCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UsuarioSupervisorFindManyArgs, 'select' | 'include'> & {
      select?: UsuarioSupervisorCountAggregateInputType | true
    }

  export interface UsuarioSupervisorDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UsuarioSupervisor'], meta: { name: 'UsuarioSupervisor' } }
    /**
     * Find zero or one UsuarioSupervisor that matches the filter.
     * @param {UsuarioSupervisorFindUniqueArgs} args - Arguments to find a UsuarioSupervisor
     * @example
     * // Get one UsuarioSupervisor
     * const usuarioSupervisor = await prisma.usuarioSupervisor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsuarioSupervisorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioSupervisorFindUniqueArgs<ExtArgs>>
    ): Prisma__UsuarioSupervisorClient<$Result.GetResult<Prisma.$UsuarioSupervisorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UsuarioSupervisor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsuarioSupervisorFindUniqueOrThrowArgs} args - Arguments to find a UsuarioSupervisor
     * @example
     * // Get one UsuarioSupervisor
     * const usuarioSupervisor = await prisma.usuarioSupervisor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsuarioSupervisorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioSupervisorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsuarioSupervisorClient<$Result.GetResult<Prisma.$UsuarioSupervisorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UsuarioSupervisor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioSupervisorFindFirstArgs} args - Arguments to find a UsuarioSupervisor
     * @example
     * // Get one UsuarioSupervisor
     * const usuarioSupervisor = await prisma.usuarioSupervisor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsuarioSupervisorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioSupervisorFindFirstArgs<ExtArgs>>
    ): Prisma__UsuarioSupervisorClient<$Result.GetResult<Prisma.$UsuarioSupervisorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UsuarioSupervisor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioSupervisorFindFirstOrThrowArgs} args - Arguments to find a UsuarioSupervisor
     * @example
     * // Get one UsuarioSupervisor
     * const usuarioSupervisor = await prisma.usuarioSupervisor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsuarioSupervisorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioSupervisorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsuarioSupervisorClient<$Result.GetResult<Prisma.$UsuarioSupervisorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UsuarioSupervisors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioSupervisorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsuarioSupervisors
     * const usuarioSupervisors = await prisma.usuarioSupervisor.findMany()
     * 
     * // Get first 10 UsuarioSupervisors
     * const usuarioSupervisors = await prisma.usuarioSupervisor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioSupervisorWithIdOnly = await prisma.usuarioSupervisor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsuarioSupervisorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioSupervisorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioSupervisorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UsuarioSupervisor.
     * @param {UsuarioSupervisorCreateArgs} args - Arguments to create a UsuarioSupervisor.
     * @example
     * // Create one UsuarioSupervisor
     * const UsuarioSupervisor = await prisma.usuarioSupervisor.create({
     *   data: {
     *     // ... data to create a UsuarioSupervisor
     *   }
     * })
     * 
    **/
    create<T extends UsuarioSupervisorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioSupervisorCreateArgs<ExtArgs>>
    ): Prisma__UsuarioSupervisorClient<$Result.GetResult<Prisma.$UsuarioSupervisorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UsuarioSupervisors.
     *     @param {UsuarioSupervisorCreateManyArgs} args - Arguments to create many UsuarioSupervisors.
     *     @example
     *     // Create many UsuarioSupervisors
     *     const usuarioSupervisor = await prisma.usuarioSupervisor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsuarioSupervisorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioSupervisorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UsuarioSupervisor.
     * @param {UsuarioSupervisorDeleteArgs} args - Arguments to delete one UsuarioSupervisor.
     * @example
     * // Delete one UsuarioSupervisor
     * const UsuarioSupervisor = await prisma.usuarioSupervisor.delete({
     *   where: {
     *     // ... filter to delete one UsuarioSupervisor
     *   }
     * })
     * 
    **/
    delete<T extends UsuarioSupervisorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioSupervisorDeleteArgs<ExtArgs>>
    ): Prisma__UsuarioSupervisorClient<$Result.GetResult<Prisma.$UsuarioSupervisorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UsuarioSupervisor.
     * @param {UsuarioSupervisorUpdateArgs} args - Arguments to update one UsuarioSupervisor.
     * @example
     * // Update one UsuarioSupervisor
     * const usuarioSupervisor = await prisma.usuarioSupervisor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsuarioSupervisorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioSupervisorUpdateArgs<ExtArgs>>
    ): Prisma__UsuarioSupervisorClient<$Result.GetResult<Prisma.$UsuarioSupervisorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UsuarioSupervisors.
     * @param {UsuarioSupervisorDeleteManyArgs} args - Arguments to filter UsuarioSupervisors to delete.
     * @example
     * // Delete a few UsuarioSupervisors
     * const { count } = await prisma.usuarioSupervisor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsuarioSupervisorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsuarioSupervisorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsuarioSupervisors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioSupervisorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsuarioSupervisors
     * const usuarioSupervisor = await prisma.usuarioSupervisor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsuarioSupervisorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioSupervisorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UsuarioSupervisor.
     * @param {UsuarioSupervisorUpsertArgs} args - Arguments to update or create a UsuarioSupervisor.
     * @example
     * // Update or create a UsuarioSupervisor
     * const usuarioSupervisor = await prisma.usuarioSupervisor.upsert({
     *   create: {
     *     // ... data to create a UsuarioSupervisor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsuarioSupervisor we want to update
     *   }
     * })
    **/
    upsert<T extends UsuarioSupervisorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsuarioSupervisorUpsertArgs<ExtArgs>>
    ): Prisma__UsuarioSupervisorClient<$Result.GetResult<Prisma.$UsuarioSupervisorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UsuarioSupervisors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioSupervisorCountArgs} args - Arguments to filter UsuarioSupervisors to count.
     * @example
     * // Count the number of UsuarioSupervisors
     * const count = await prisma.usuarioSupervisor.count({
     *   where: {
     *     // ... the filter for the UsuarioSupervisors we want to count
     *   }
     * })
    **/
    count<T extends UsuarioSupervisorCountArgs>(
      args?: Subset<T, UsuarioSupervisorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioSupervisorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsuarioSupervisor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioSupervisorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioSupervisorAggregateArgs>(args: Subset<T, UsuarioSupervisorAggregateArgs>): Prisma.PrismaPromise<GetUsuarioSupervisorAggregateType<T>>

    /**
     * Group by UsuarioSupervisor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioSupervisorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioSupervisorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioSupervisorGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioSupervisorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioSupervisorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioSupervisorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UsuarioSupervisor model
   */
  readonly fields: UsuarioSupervisorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UsuarioSupervisor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioSupervisorClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    reportesSupervisados<T extends UsuarioSupervisor$reportesSupervisadosArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioSupervisor$reportesSupervisadosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UsuarioSupervisor model
   */ 
  interface UsuarioSupervisorFieldRefs {
    readonly id: FieldRef<"UsuarioSupervisor", 'Int'>
    readonly nombre: FieldRef<"UsuarioSupervisor", 'String'>
    readonly correo: FieldRef<"UsuarioSupervisor", 'String'>
  }
    

  // Custom InputTypes

  /**
   * UsuarioSupervisor findUnique
   */
  export type UsuarioSupervisorFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioSupervisor
     */
    select?: UsuarioSupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioSupervisorInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioSupervisor to fetch.
     */
    where: UsuarioSupervisorWhereUniqueInput
  }


  /**
   * UsuarioSupervisor findUniqueOrThrow
   */
  export type UsuarioSupervisorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioSupervisor
     */
    select?: UsuarioSupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioSupervisorInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioSupervisor to fetch.
     */
    where: UsuarioSupervisorWhereUniqueInput
  }


  /**
   * UsuarioSupervisor findFirst
   */
  export type UsuarioSupervisorFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioSupervisor
     */
    select?: UsuarioSupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioSupervisorInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioSupervisor to fetch.
     */
    where?: UsuarioSupervisorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsuarioSupervisors to fetch.
     */
    orderBy?: UsuarioSupervisorOrderByWithRelationInput | UsuarioSupervisorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsuarioSupervisors.
     */
    cursor?: UsuarioSupervisorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsuarioSupervisors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsuarioSupervisors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsuarioSupervisors.
     */
    distinct?: UsuarioSupervisorScalarFieldEnum | UsuarioSupervisorScalarFieldEnum[]
  }


  /**
   * UsuarioSupervisor findFirstOrThrow
   */
  export type UsuarioSupervisorFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioSupervisor
     */
    select?: UsuarioSupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioSupervisorInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioSupervisor to fetch.
     */
    where?: UsuarioSupervisorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsuarioSupervisors to fetch.
     */
    orderBy?: UsuarioSupervisorOrderByWithRelationInput | UsuarioSupervisorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsuarioSupervisors.
     */
    cursor?: UsuarioSupervisorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsuarioSupervisors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsuarioSupervisors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsuarioSupervisors.
     */
    distinct?: UsuarioSupervisorScalarFieldEnum | UsuarioSupervisorScalarFieldEnum[]
  }


  /**
   * UsuarioSupervisor findMany
   */
  export type UsuarioSupervisorFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioSupervisor
     */
    select?: UsuarioSupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioSupervisorInclude<ExtArgs> | null
    /**
     * Filter, which UsuarioSupervisors to fetch.
     */
    where?: UsuarioSupervisorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsuarioSupervisors to fetch.
     */
    orderBy?: UsuarioSupervisorOrderByWithRelationInput | UsuarioSupervisorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UsuarioSupervisors.
     */
    cursor?: UsuarioSupervisorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsuarioSupervisors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsuarioSupervisors.
     */
    skip?: number
    distinct?: UsuarioSupervisorScalarFieldEnum | UsuarioSupervisorScalarFieldEnum[]
  }


  /**
   * UsuarioSupervisor create
   */
  export type UsuarioSupervisorCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioSupervisor
     */
    select?: UsuarioSupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioSupervisorInclude<ExtArgs> | null
    /**
     * The data needed to create a UsuarioSupervisor.
     */
    data: XOR<UsuarioSupervisorCreateInput, UsuarioSupervisorUncheckedCreateInput>
  }


  /**
   * UsuarioSupervisor createMany
   */
  export type UsuarioSupervisorCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UsuarioSupervisors.
     */
    data: UsuarioSupervisorCreateManyInput | UsuarioSupervisorCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * UsuarioSupervisor update
   */
  export type UsuarioSupervisorUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioSupervisor
     */
    select?: UsuarioSupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioSupervisorInclude<ExtArgs> | null
    /**
     * The data needed to update a UsuarioSupervisor.
     */
    data: XOR<UsuarioSupervisorUpdateInput, UsuarioSupervisorUncheckedUpdateInput>
    /**
     * Choose, which UsuarioSupervisor to update.
     */
    where: UsuarioSupervisorWhereUniqueInput
  }


  /**
   * UsuarioSupervisor updateMany
   */
  export type UsuarioSupervisorUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UsuarioSupervisors.
     */
    data: XOR<UsuarioSupervisorUpdateManyMutationInput, UsuarioSupervisorUncheckedUpdateManyInput>
    /**
     * Filter which UsuarioSupervisors to update
     */
    where?: UsuarioSupervisorWhereInput
  }


  /**
   * UsuarioSupervisor upsert
   */
  export type UsuarioSupervisorUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioSupervisor
     */
    select?: UsuarioSupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioSupervisorInclude<ExtArgs> | null
    /**
     * The filter to search for the UsuarioSupervisor to update in case it exists.
     */
    where: UsuarioSupervisorWhereUniqueInput
    /**
     * In case the UsuarioSupervisor found by the `where` argument doesn't exist, create a new UsuarioSupervisor with this data.
     */
    create: XOR<UsuarioSupervisorCreateInput, UsuarioSupervisorUncheckedCreateInput>
    /**
     * In case the UsuarioSupervisor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioSupervisorUpdateInput, UsuarioSupervisorUncheckedUpdateInput>
  }


  /**
   * UsuarioSupervisor delete
   */
  export type UsuarioSupervisorDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioSupervisor
     */
    select?: UsuarioSupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioSupervisorInclude<ExtArgs> | null
    /**
     * Filter which UsuarioSupervisor to delete.
     */
    where: UsuarioSupervisorWhereUniqueInput
  }


  /**
   * UsuarioSupervisor deleteMany
   */
  export type UsuarioSupervisorDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsuarioSupervisors to delete
     */
    where?: UsuarioSupervisorWhereInput
  }


  /**
   * UsuarioSupervisor.reportesSupervisados
   */
  export type UsuarioSupervisor$reportesSupervisadosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reporte
     */
    select?: ReporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReporteInclude<ExtArgs> | null
    where?: ReporteWhereInput
    orderBy?: ReporteOrderByWithRelationInput | ReporteOrderByWithRelationInput[]
    cursor?: ReporteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReporteScalarFieldEnum | ReporteScalarFieldEnum[]
  }


  /**
   * UsuarioSupervisor without action
   */
  export type UsuarioSupervisorDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioSupervisor
     */
    select?: UsuarioSupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioSupervisorInclude<ExtArgs> | null
  }



  /**
   * Model Reporte
   */

  export type AggregateReporte = {
    _count: ReporteCountAggregateOutputType | null
    _avg: ReporteAvgAggregateOutputType | null
    _sum: ReporteSumAggregateOutputType | null
    _min: ReporteMinAggregateOutputType | null
    _max: ReporteMaxAggregateOutputType | null
  }

  export type ReporteAvgAggregateOutputType = {
    id: number | null
    prioridad: number | null
    idUsuario: number | null
    idUsuarioTecnico: number | null
    idUsuarioSupervisor: number | null
  }

  export type ReporteSumAggregateOutputType = {
    id: number | null
    prioridad: number | null
    idUsuario: number | null
    idUsuarioTecnico: number | null
    idUsuarioSupervisor: number | null
  }

  export type ReporteMinAggregateOutputType = {
    id: number | null
    titulo: string | null
    descripcion: string | null
    categoria: string | null
    prioridad: number | null
    estado: string | null
    fechaCreacion: Date | null
    fechaFinalizacion: Date | null
    idUsuario: number | null
    idUsuarioTecnico: number | null
    idUsuarioSupervisor: number | null
  }

  export type ReporteMaxAggregateOutputType = {
    id: number | null
    titulo: string | null
    descripcion: string | null
    categoria: string | null
    prioridad: number | null
    estado: string | null
    fechaCreacion: Date | null
    fechaFinalizacion: Date | null
    idUsuario: number | null
    idUsuarioTecnico: number | null
    idUsuarioSupervisor: number | null
  }

  export type ReporteCountAggregateOutputType = {
    id: number
    titulo: number
    descripcion: number
    categoria: number
    prioridad: number
    estado: number
    fechaCreacion: number
    fechaFinalizacion: number
    idUsuario: number
    idUsuarioTecnico: number
    idUsuarioSupervisor: number
    _all: number
  }


  export type ReporteAvgAggregateInputType = {
    id?: true
    prioridad?: true
    idUsuario?: true
    idUsuarioTecnico?: true
    idUsuarioSupervisor?: true
  }

  export type ReporteSumAggregateInputType = {
    id?: true
    prioridad?: true
    idUsuario?: true
    idUsuarioTecnico?: true
    idUsuarioSupervisor?: true
  }

  export type ReporteMinAggregateInputType = {
    id?: true
    titulo?: true
    descripcion?: true
    categoria?: true
    prioridad?: true
    estado?: true
    fechaCreacion?: true
    fechaFinalizacion?: true
    idUsuario?: true
    idUsuarioTecnico?: true
    idUsuarioSupervisor?: true
  }

  export type ReporteMaxAggregateInputType = {
    id?: true
    titulo?: true
    descripcion?: true
    categoria?: true
    prioridad?: true
    estado?: true
    fechaCreacion?: true
    fechaFinalizacion?: true
    idUsuario?: true
    idUsuarioTecnico?: true
    idUsuarioSupervisor?: true
  }

  export type ReporteCountAggregateInputType = {
    id?: true
    titulo?: true
    descripcion?: true
    categoria?: true
    prioridad?: true
    estado?: true
    fechaCreacion?: true
    fechaFinalizacion?: true
    idUsuario?: true
    idUsuarioTecnico?: true
    idUsuarioSupervisor?: true
    _all?: true
  }

  export type ReporteAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reporte to aggregate.
     */
    where?: ReporteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reportes to fetch.
     */
    orderBy?: ReporteOrderByWithRelationInput | ReporteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReporteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reportes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reportes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reportes
    **/
    _count?: true | ReporteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReporteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReporteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReporteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReporteMaxAggregateInputType
  }

  export type GetReporteAggregateType<T extends ReporteAggregateArgs> = {
        [P in keyof T & keyof AggregateReporte]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReporte[P]>
      : GetScalarType<T[P], AggregateReporte[P]>
  }




  export type ReporteGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ReporteWhereInput
    orderBy?: ReporteOrderByWithAggregationInput | ReporteOrderByWithAggregationInput[]
    by: ReporteScalarFieldEnum[] | ReporteScalarFieldEnum
    having?: ReporteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReporteCountAggregateInputType | true
    _avg?: ReporteAvgAggregateInputType
    _sum?: ReporteSumAggregateInputType
    _min?: ReporteMinAggregateInputType
    _max?: ReporteMaxAggregateInputType
  }

  export type ReporteGroupByOutputType = {
    id: number
    titulo: string
    descripcion: string
    categoria: string
    prioridad: number
    estado: string
    fechaCreacion: Date
    fechaFinalizacion: Date | null
    idUsuario: number
    idUsuarioTecnico: number | null
    idUsuarioSupervisor: number | null
    _count: ReporteCountAggregateOutputType | null
    _avg: ReporteAvgAggregateOutputType | null
    _sum: ReporteSumAggregateOutputType | null
    _min: ReporteMinAggregateOutputType | null
    _max: ReporteMaxAggregateOutputType | null
  }

  type GetReporteGroupByPayload<T extends ReporteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReporteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReporteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReporteGroupByOutputType[P]>
            : GetScalarType<T[P], ReporteGroupByOutputType[P]>
        }
      >
    >


  export type ReporteSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    descripcion?: boolean
    categoria?: boolean
    prioridad?: boolean
    estado?: boolean
    fechaCreacion?: boolean
    fechaFinalizacion?: boolean
    idUsuario?: boolean
    idUsuarioTecnico?: boolean
    idUsuarioSupervisor?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    tecnico?: boolean | Reporte$tecnicoArgs<ExtArgs>
    supervisor?: boolean | Reporte$supervisorArgs<ExtArgs>
  }, ExtArgs["result"]["reporte"]>

  export type ReporteSelectScalar = {
    id?: boolean
    titulo?: boolean
    descripcion?: boolean
    categoria?: boolean
    prioridad?: boolean
    estado?: boolean
    fechaCreacion?: boolean
    fechaFinalizacion?: boolean
    idUsuario?: boolean
    idUsuarioTecnico?: boolean
    idUsuarioSupervisor?: boolean
  }

  export type ReporteInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    tecnico?: boolean | Reporte$tecnicoArgs<ExtArgs>
    supervisor?: boolean | Reporte$supervisorArgs<ExtArgs>
  }


  export type $ReportePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Reporte"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      tecnico: Prisma.$UsuarioTecnicoPayload<ExtArgs> | null
      supervisor: Prisma.$UsuarioSupervisorPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: number
      titulo: string
      descripcion: string
      categoria: string
      prioridad: number
      estado: string
      fechaCreacion: Date
      fechaFinalizacion: Date | null
      idUsuario: number
      idUsuarioTecnico: number | null
      idUsuarioSupervisor: number | null
    }, ExtArgs["result"]["reporte"]>
    composites: {}
  }


  type ReporteGetPayload<S extends boolean | null | undefined | ReporteDefaultArgs> = $Result.GetResult<Prisma.$ReportePayload, S>

  type ReporteCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ReporteFindManyArgs, 'select' | 'include'> & {
      select?: ReporteCountAggregateInputType | true
    }

  export interface ReporteDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reporte'], meta: { name: 'Reporte' } }
    /**
     * Find zero or one Reporte that matches the filter.
     * @param {ReporteFindUniqueArgs} args - Arguments to find a Reporte
     * @example
     * // Get one Reporte
     * const reporte = await prisma.reporte.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReporteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReporteFindUniqueArgs<ExtArgs>>
    ): Prisma__ReporteClient<$Result.GetResult<Prisma.$ReportePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Reporte that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReporteFindUniqueOrThrowArgs} args - Arguments to find a Reporte
     * @example
     * // Get one Reporte
     * const reporte = await prisma.reporte.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReporteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReporteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReporteClient<$Result.GetResult<Prisma.$ReportePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Reporte that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReporteFindFirstArgs} args - Arguments to find a Reporte
     * @example
     * // Get one Reporte
     * const reporte = await prisma.reporte.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReporteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReporteFindFirstArgs<ExtArgs>>
    ): Prisma__ReporteClient<$Result.GetResult<Prisma.$ReportePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Reporte that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReporteFindFirstOrThrowArgs} args - Arguments to find a Reporte
     * @example
     * // Get one Reporte
     * const reporte = await prisma.reporte.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReporteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReporteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReporteClient<$Result.GetResult<Prisma.$ReportePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Reportes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReporteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reportes
     * const reportes = await prisma.reporte.findMany()
     * 
     * // Get first 10 Reportes
     * const reportes = await prisma.reporte.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reporteWithIdOnly = await prisma.reporte.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReporteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReporteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Reporte.
     * @param {ReporteCreateArgs} args - Arguments to create a Reporte.
     * @example
     * // Create one Reporte
     * const Reporte = await prisma.reporte.create({
     *   data: {
     *     // ... data to create a Reporte
     *   }
     * })
     * 
    **/
    create<T extends ReporteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReporteCreateArgs<ExtArgs>>
    ): Prisma__ReporteClient<$Result.GetResult<Prisma.$ReportePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Reportes.
     *     @param {ReporteCreateManyArgs} args - Arguments to create many Reportes.
     *     @example
     *     // Create many Reportes
     *     const reporte = await prisma.reporte.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReporteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReporteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reporte.
     * @param {ReporteDeleteArgs} args - Arguments to delete one Reporte.
     * @example
     * // Delete one Reporte
     * const Reporte = await prisma.reporte.delete({
     *   where: {
     *     // ... filter to delete one Reporte
     *   }
     * })
     * 
    **/
    delete<T extends ReporteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReporteDeleteArgs<ExtArgs>>
    ): Prisma__ReporteClient<$Result.GetResult<Prisma.$ReportePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Reporte.
     * @param {ReporteUpdateArgs} args - Arguments to update one Reporte.
     * @example
     * // Update one Reporte
     * const reporte = await prisma.reporte.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReporteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReporteUpdateArgs<ExtArgs>>
    ): Prisma__ReporteClient<$Result.GetResult<Prisma.$ReportePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Reportes.
     * @param {ReporteDeleteManyArgs} args - Arguments to filter Reportes to delete.
     * @example
     * // Delete a few Reportes
     * const { count } = await prisma.reporte.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReporteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReporteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reportes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReporteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reportes
     * const reporte = await prisma.reporte.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReporteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReporteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reporte.
     * @param {ReporteUpsertArgs} args - Arguments to update or create a Reporte.
     * @example
     * // Update or create a Reporte
     * const reporte = await prisma.reporte.upsert({
     *   create: {
     *     // ... data to create a Reporte
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reporte we want to update
     *   }
     * })
    **/
    upsert<T extends ReporteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReporteUpsertArgs<ExtArgs>>
    ): Prisma__ReporteClient<$Result.GetResult<Prisma.$ReportePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Reportes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReporteCountArgs} args - Arguments to filter Reportes to count.
     * @example
     * // Count the number of Reportes
     * const count = await prisma.reporte.count({
     *   where: {
     *     // ... the filter for the Reportes we want to count
     *   }
     * })
    **/
    count<T extends ReporteCountArgs>(
      args?: Subset<T, ReporteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReporteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reporte.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReporteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReporteAggregateArgs>(args: Subset<T, ReporteAggregateArgs>): Prisma.PrismaPromise<GetReporteAggregateType<T>>

    /**
     * Group by Reporte.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReporteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReporteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReporteGroupByArgs['orderBy'] }
        : { orderBy?: ReporteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReporteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReporteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reporte model
   */
  readonly fields: ReporteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reporte.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReporteClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    tecnico<T extends Reporte$tecnicoArgs<ExtArgs> = {}>(args?: Subset<T, Reporte$tecnicoArgs<ExtArgs>>): Prisma__UsuarioTecnicoClient<$Result.GetResult<Prisma.$UsuarioTecnicoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    supervisor<T extends Reporte$supervisorArgs<ExtArgs> = {}>(args?: Subset<T, Reporte$supervisorArgs<ExtArgs>>): Prisma__UsuarioSupervisorClient<$Result.GetResult<Prisma.$UsuarioSupervisorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Reporte model
   */ 
  interface ReporteFieldRefs {
    readonly id: FieldRef<"Reporte", 'Int'>
    readonly titulo: FieldRef<"Reporte", 'String'>
    readonly descripcion: FieldRef<"Reporte", 'String'>
    readonly categoria: FieldRef<"Reporte", 'String'>
    readonly prioridad: FieldRef<"Reporte", 'Int'>
    readonly estado: FieldRef<"Reporte", 'String'>
    readonly fechaCreacion: FieldRef<"Reporte", 'DateTime'>
    readonly fechaFinalizacion: FieldRef<"Reporte", 'DateTime'>
    readonly idUsuario: FieldRef<"Reporte", 'Int'>
    readonly idUsuarioTecnico: FieldRef<"Reporte", 'Int'>
    readonly idUsuarioSupervisor: FieldRef<"Reporte", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Reporte findUnique
   */
  export type ReporteFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reporte
     */
    select?: ReporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReporteInclude<ExtArgs> | null
    /**
     * Filter, which Reporte to fetch.
     */
    where: ReporteWhereUniqueInput
  }


  /**
   * Reporte findUniqueOrThrow
   */
  export type ReporteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reporte
     */
    select?: ReporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReporteInclude<ExtArgs> | null
    /**
     * Filter, which Reporte to fetch.
     */
    where: ReporteWhereUniqueInput
  }


  /**
   * Reporte findFirst
   */
  export type ReporteFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reporte
     */
    select?: ReporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReporteInclude<ExtArgs> | null
    /**
     * Filter, which Reporte to fetch.
     */
    where?: ReporteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reportes to fetch.
     */
    orderBy?: ReporteOrderByWithRelationInput | ReporteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reportes.
     */
    cursor?: ReporteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reportes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reportes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reportes.
     */
    distinct?: ReporteScalarFieldEnum | ReporteScalarFieldEnum[]
  }


  /**
   * Reporte findFirstOrThrow
   */
  export type ReporteFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reporte
     */
    select?: ReporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReporteInclude<ExtArgs> | null
    /**
     * Filter, which Reporte to fetch.
     */
    where?: ReporteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reportes to fetch.
     */
    orderBy?: ReporteOrderByWithRelationInput | ReporteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reportes.
     */
    cursor?: ReporteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reportes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reportes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reportes.
     */
    distinct?: ReporteScalarFieldEnum | ReporteScalarFieldEnum[]
  }


  /**
   * Reporte findMany
   */
  export type ReporteFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reporte
     */
    select?: ReporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReporteInclude<ExtArgs> | null
    /**
     * Filter, which Reportes to fetch.
     */
    where?: ReporteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reportes to fetch.
     */
    orderBy?: ReporteOrderByWithRelationInput | ReporteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reportes.
     */
    cursor?: ReporteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reportes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reportes.
     */
    skip?: number
    distinct?: ReporteScalarFieldEnum | ReporteScalarFieldEnum[]
  }


  /**
   * Reporte create
   */
  export type ReporteCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reporte
     */
    select?: ReporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReporteInclude<ExtArgs> | null
    /**
     * The data needed to create a Reporte.
     */
    data: XOR<ReporteCreateInput, ReporteUncheckedCreateInput>
  }


  /**
   * Reporte createMany
   */
  export type ReporteCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reportes.
     */
    data: ReporteCreateManyInput | ReporteCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Reporte update
   */
  export type ReporteUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reporte
     */
    select?: ReporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReporteInclude<ExtArgs> | null
    /**
     * The data needed to update a Reporte.
     */
    data: XOR<ReporteUpdateInput, ReporteUncheckedUpdateInput>
    /**
     * Choose, which Reporte to update.
     */
    where: ReporteWhereUniqueInput
  }


  /**
   * Reporte updateMany
   */
  export type ReporteUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reportes.
     */
    data: XOR<ReporteUpdateManyMutationInput, ReporteUncheckedUpdateManyInput>
    /**
     * Filter which Reportes to update
     */
    where?: ReporteWhereInput
  }


  /**
   * Reporte upsert
   */
  export type ReporteUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reporte
     */
    select?: ReporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReporteInclude<ExtArgs> | null
    /**
     * The filter to search for the Reporte to update in case it exists.
     */
    where: ReporteWhereUniqueInput
    /**
     * In case the Reporte found by the `where` argument doesn't exist, create a new Reporte with this data.
     */
    create: XOR<ReporteCreateInput, ReporteUncheckedCreateInput>
    /**
     * In case the Reporte was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReporteUpdateInput, ReporteUncheckedUpdateInput>
  }


  /**
   * Reporte delete
   */
  export type ReporteDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reporte
     */
    select?: ReporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReporteInclude<ExtArgs> | null
    /**
     * Filter which Reporte to delete.
     */
    where: ReporteWhereUniqueInput
  }


  /**
   * Reporte deleteMany
   */
  export type ReporteDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reportes to delete
     */
    where?: ReporteWhereInput
  }


  /**
   * Reporte.tecnico
   */
  export type Reporte$tecnicoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioTecnico
     */
    select?: UsuarioTecnicoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioTecnicoInclude<ExtArgs> | null
    where?: UsuarioTecnicoWhereInput
  }


  /**
   * Reporte.supervisor
   */
  export type Reporte$supervisorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioSupervisor
     */
    select?: UsuarioSupervisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuarioSupervisorInclude<ExtArgs> | null
    where?: UsuarioSupervisorWhereInput
  }


  /**
   * Reporte without action
   */
  export type ReporteDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reporte
     */
    select?: ReporteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReporteInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const LocalidadScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre'
  };

  export type LocalidadScalarFieldEnum = (typeof LocalidadScalarFieldEnum)[keyof typeof LocalidadScalarFieldEnum]


  export const InstitucionScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    dominio: 'dominio'
  };

  export type InstitucionScalarFieldEnum = (typeof InstitucionScalarFieldEnum)[keyof typeof InstitucionScalarFieldEnum]


  export const OficinaScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    direccion: 'direccion',
    piso: 'piso',
    idLocalidad: 'idLocalidad',
    idInstitucion: 'idInstitucion'
  };

  export type OficinaScalarFieldEnum = (typeof OficinaScalarFieldEnum)[keyof typeof OficinaScalarFieldEnum]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    correo: 'correo',
    idOficina: 'idOficina'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const UsuarioTecnicoScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    correo: 'correo'
  };

  export type UsuarioTecnicoScalarFieldEnum = (typeof UsuarioTecnicoScalarFieldEnum)[keyof typeof UsuarioTecnicoScalarFieldEnum]


  export const UsuarioSupervisorScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    correo: 'correo'
  };

  export type UsuarioSupervisorScalarFieldEnum = (typeof UsuarioSupervisorScalarFieldEnum)[keyof typeof UsuarioSupervisorScalarFieldEnum]


  export const ReporteScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    descripcion: 'descripcion',
    categoria: 'categoria',
    prioridad: 'prioridad',
    estado: 'estado',
    fechaCreacion: 'fechaCreacion',
    fechaFinalizacion: 'fechaFinalizacion',
    idUsuario: 'idUsuario',
    idUsuarioTecnico: 'idUsuarioTecnico',
    idUsuarioSupervisor: 'idUsuarioSupervisor'
  };

  export type ReporteScalarFieldEnum = (typeof ReporteScalarFieldEnum)[keyof typeof ReporteScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type LocalidadWhereInput = {
    AND?: LocalidadWhereInput | LocalidadWhereInput[]
    OR?: LocalidadWhereInput[]
    NOT?: LocalidadWhereInput | LocalidadWhereInput[]
    id?: IntFilter<"Localidad"> | number
    nombre?: StringFilter<"Localidad"> | string
    Institucion?: OficinaListRelationFilter
  }

  export type LocalidadOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    Institucion?: OficinaOrderByRelationAggregateInput
  }

  export type LocalidadWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LocalidadWhereInput | LocalidadWhereInput[]
    OR?: LocalidadWhereInput[]
    NOT?: LocalidadWhereInput | LocalidadWhereInput[]
    nombre?: StringFilter<"Localidad"> | string
    Institucion?: OficinaListRelationFilter
  }, "id">

  export type LocalidadOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    _count?: LocalidadCountOrderByAggregateInput
    _avg?: LocalidadAvgOrderByAggregateInput
    _max?: LocalidadMaxOrderByAggregateInput
    _min?: LocalidadMinOrderByAggregateInput
    _sum?: LocalidadSumOrderByAggregateInput
  }

  export type LocalidadScalarWhereWithAggregatesInput = {
    AND?: LocalidadScalarWhereWithAggregatesInput | LocalidadScalarWhereWithAggregatesInput[]
    OR?: LocalidadScalarWhereWithAggregatesInput[]
    NOT?: LocalidadScalarWhereWithAggregatesInput | LocalidadScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Localidad"> | number
    nombre?: StringWithAggregatesFilter<"Localidad"> | string
  }

  export type InstitucionWhereInput = {
    AND?: InstitucionWhereInput | InstitucionWhereInput[]
    OR?: InstitucionWhereInput[]
    NOT?: InstitucionWhereInput | InstitucionWhereInput[]
    id?: IntFilter<"Institucion"> | number
    nombre?: StringFilter<"Institucion"> | string
    dominio?: StringFilter<"Institucion"> | string
    oficinas?: OficinaListRelationFilter
  }

  export type InstitucionOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    dominio?: SortOrder
    oficinas?: OficinaOrderByRelationAggregateInput
  }

  export type InstitucionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InstitucionWhereInput | InstitucionWhereInput[]
    OR?: InstitucionWhereInput[]
    NOT?: InstitucionWhereInput | InstitucionWhereInput[]
    nombre?: StringFilter<"Institucion"> | string
    dominio?: StringFilter<"Institucion"> | string
    oficinas?: OficinaListRelationFilter
  }, "id">

  export type InstitucionOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    dominio?: SortOrder
    _count?: InstitucionCountOrderByAggregateInput
    _avg?: InstitucionAvgOrderByAggregateInput
    _max?: InstitucionMaxOrderByAggregateInput
    _min?: InstitucionMinOrderByAggregateInput
    _sum?: InstitucionSumOrderByAggregateInput
  }

  export type InstitucionScalarWhereWithAggregatesInput = {
    AND?: InstitucionScalarWhereWithAggregatesInput | InstitucionScalarWhereWithAggregatesInput[]
    OR?: InstitucionScalarWhereWithAggregatesInput[]
    NOT?: InstitucionScalarWhereWithAggregatesInput | InstitucionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Institucion"> | number
    nombre?: StringWithAggregatesFilter<"Institucion"> | string
    dominio?: StringWithAggregatesFilter<"Institucion"> | string
  }

  export type OficinaWhereInput = {
    AND?: OficinaWhereInput | OficinaWhereInput[]
    OR?: OficinaWhereInput[]
    NOT?: OficinaWhereInput | OficinaWhereInput[]
    id?: IntFilter<"Oficina"> | number
    nombre?: StringFilter<"Oficina"> | string
    direccion?: StringFilter<"Oficina"> | string
    piso?: IntNullableFilter<"Oficina"> | number | null
    idLocalidad?: IntFilter<"Oficina"> | number
    idInstitucion?: IntFilter<"Oficina"> | number
    Localidad?: XOR<LocalidadRelationFilter, LocalidadWhereInput>
    Institucion?: XOR<InstitucionRelationFilter, InstitucionWhereInput>
    usuarios?: UsuarioListRelationFilter
  }

  export type OficinaOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    piso?: SortOrderInput | SortOrder
    idLocalidad?: SortOrder
    idInstitucion?: SortOrder
    Localidad?: LocalidadOrderByWithRelationInput
    Institucion?: InstitucionOrderByWithRelationInput
    usuarios?: UsuarioOrderByRelationAggregateInput
  }

  export type OficinaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OficinaWhereInput | OficinaWhereInput[]
    OR?: OficinaWhereInput[]
    NOT?: OficinaWhereInput | OficinaWhereInput[]
    nombre?: StringFilter<"Oficina"> | string
    direccion?: StringFilter<"Oficina"> | string
    piso?: IntNullableFilter<"Oficina"> | number | null
    idLocalidad?: IntFilter<"Oficina"> | number
    idInstitucion?: IntFilter<"Oficina"> | number
    Localidad?: XOR<LocalidadRelationFilter, LocalidadWhereInput>
    Institucion?: XOR<InstitucionRelationFilter, InstitucionWhereInput>
    usuarios?: UsuarioListRelationFilter
  }, "id">

  export type OficinaOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    piso?: SortOrderInput | SortOrder
    idLocalidad?: SortOrder
    idInstitucion?: SortOrder
    _count?: OficinaCountOrderByAggregateInput
    _avg?: OficinaAvgOrderByAggregateInput
    _max?: OficinaMaxOrderByAggregateInput
    _min?: OficinaMinOrderByAggregateInput
    _sum?: OficinaSumOrderByAggregateInput
  }

  export type OficinaScalarWhereWithAggregatesInput = {
    AND?: OficinaScalarWhereWithAggregatesInput | OficinaScalarWhereWithAggregatesInput[]
    OR?: OficinaScalarWhereWithAggregatesInput[]
    NOT?: OficinaScalarWhereWithAggregatesInput | OficinaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Oficina"> | number
    nombre?: StringWithAggregatesFilter<"Oficina"> | string
    direccion?: StringWithAggregatesFilter<"Oficina"> | string
    piso?: IntNullableWithAggregatesFilter<"Oficina"> | number | null
    idLocalidad?: IntWithAggregatesFilter<"Oficina"> | number
    idInstitucion?: IntWithAggregatesFilter<"Oficina"> | number
  }

  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    nombre?: StringFilter<"Usuario"> | string
    correo?: StringFilter<"Usuario"> | string
    idOficina?: IntFilter<"Usuario"> | number
    oficina?: XOR<OficinaRelationFilter, OficinaWhereInput>
    reportes?: ReporteListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    idOficina?: SortOrder
    oficina?: OficinaOrderByWithRelationInput
    reportes?: ReporteOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    nombre?: StringFilter<"Usuario"> | string
    correo?: StringFilter<"Usuario"> | string
    idOficina?: IntFilter<"Usuario"> | number
    oficina?: XOR<OficinaRelationFilter, OficinaWhereInput>
    reportes?: ReporteListRelationFilter
  }, "id">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    idOficina?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    nombre?: StringWithAggregatesFilter<"Usuario"> | string
    correo?: StringWithAggregatesFilter<"Usuario"> | string
    idOficina?: IntWithAggregatesFilter<"Usuario"> | number
  }

  export type UsuarioTecnicoWhereInput = {
    AND?: UsuarioTecnicoWhereInput | UsuarioTecnicoWhereInput[]
    OR?: UsuarioTecnicoWhereInput[]
    NOT?: UsuarioTecnicoWhereInput | UsuarioTecnicoWhereInput[]
    id?: IntFilter<"UsuarioTecnico"> | number
    nombre?: StringFilter<"UsuarioTecnico"> | string
    correo?: StringFilter<"UsuarioTecnico"> | string
    reportesSolucionados?: ReporteListRelationFilter
  }

  export type UsuarioTecnicoOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    reportesSolucionados?: ReporteOrderByRelationAggregateInput
  }

  export type UsuarioTecnicoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UsuarioTecnicoWhereInput | UsuarioTecnicoWhereInput[]
    OR?: UsuarioTecnicoWhereInput[]
    NOT?: UsuarioTecnicoWhereInput | UsuarioTecnicoWhereInput[]
    nombre?: StringFilter<"UsuarioTecnico"> | string
    correo?: StringFilter<"UsuarioTecnico"> | string
    reportesSolucionados?: ReporteListRelationFilter
  }, "id">

  export type UsuarioTecnicoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    _count?: UsuarioTecnicoCountOrderByAggregateInput
    _avg?: UsuarioTecnicoAvgOrderByAggregateInput
    _max?: UsuarioTecnicoMaxOrderByAggregateInput
    _min?: UsuarioTecnicoMinOrderByAggregateInput
    _sum?: UsuarioTecnicoSumOrderByAggregateInput
  }

  export type UsuarioTecnicoScalarWhereWithAggregatesInput = {
    AND?: UsuarioTecnicoScalarWhereWithAggregatesInput | UsuarioTecnicoScalarWhereWithAggregatesInput[]
    OR?: UsuarioTecnicoScalarWhereWithAggregatesInput[]
    NOT?: UsuarioTecnicoScalarWhereWithAggregatesInput | UsuarioTecnicoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UsuarioTecnico"> | number
    nombre?: StringWithAggregatesFilter<"UsuarioTecnico"> | string
    correo?: StringWithAggregatesFilter<"UsuarioTecnico"> | string
  }

  export type UsuarioSupervisorWhereInput = {
    AND?: UsuarioSupervisorWhereInput | UsuarioSupervisorWhereInput[]
    OR?: UsuarioSupervisorWhereInput[]
    NOT?: UsuarioSupervisorWhereInput | UsuarioSupervisorWhereInput[]
    id?: IntFilter<"UsuarioSupervisor"> | number
    nombre?: StringFilter<"UsuarioSupervisor"> | string
    correo?: StringFilter<"UsuarioSupervisor"> | string
    reportesSupervisados?: ReporteListRelationFilter
  }

  export type UsuarioSupervisorOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    reportesSupervisados?: ReporteOrderByRelationAggregateInput
  }

  export type UsuarioSupervisorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UsuarioSupervisorWhereInput | UsuarioSupervisorWhereInput[]
    OR?: UsuarioSupervisorWhereInput[]
    NOT?: UsuarioSupervisorWhereInput | UsuarioSupervisorWhereInput[]
    nombre?: StringFilter<"UsuarioSupervisor"> | string
    correo?: StringFilter<"UsuarioSupervisor"> | string
    reportesSupervisados?: ReporteListRelationFilter
  }, "id">

  export type UsuarioSupervisorOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    _count?: UsuarioSupervisorCountOrderByAggregateInput
    _avg?: UsuarioSupervisorAvgOrderByAggregateInput
    _max?: UsuarioSupervisorMaxOrderByAggregateInput
    _min?: UsuarioSupervisorMinOrderByAggregateInput
    _sum?: UsuarioSupervisorSumOrderByAggregateInput
  }

  export type UsuarioSupervisorScalarWhereWithAggregatesInput = {
    AND?: UsuarioSupervisorScalarWhereWithAggregatesInput | UsuarioSupervisorScalarWhereWithAggregatesInput[]
    OR?: UsuarioSupervisorScalarWhereWithAggregatesInput[]
    NOT?: UsuarioSupervisorScalarWhereWithAggregatesInput | UsuarioSupervisorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UsuarioSupervisor"> | number
    nombre?: StringWithAggregatesFilter<"UsuarioSupervisor"> | string
    correo?: StringWithAggregatesFilter<"UsuarioSupervisor"> | string
  }

  export type ReporteWhereInput = {
    AND?: ReporteWhereInput | ReporteWhereInput[]
    OR?: ReporteWhereInput[]
    NOT?: ReporteWhereInput | ReporteWhereInput[]
    id?: IntFilter<"Reporte"> | number
    titulo?: StringFilter<"Reporte"> | string
    descripcion?: StringFilter<"Reporte"> | string
    categoria?: StringFilter<"Reporte"> | string
    prioridad?: IntFilter<"Reporte"> | number
    estado?: StringFilter<"Reporte"> | string
    fechaCreacion?: DateTimeFilter<"Reporte"> | Date | string
    fechaFinalizacion?: DateTimeNullableFilter<"Reporte"> | Date | string | null
    idUsuario?: IntFilter<"Reporte"> | number
    idUsuarioTecnico?: IntNullableFilter<"Reporte"> | number | null
    idUsuarioSupervisor?: IntNullableFilter<"Reporte"> | number | null
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    tecnico?: XOR<UsuarioTecnicoNullableRelationFilter, UsuarioTecnicoWhereInput> | null
    supervisor?: XOR<UsuarioSupervisorNullableRelationFilter, UsuarioSupervisorWhereInput> | null
  }

  export type ReporteOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    categoria?: SortOrder
    prioridad?: SortOrder
    estado?: SortOrder
    fechaCreacion?: SortOrder
    fechaFinalizacion?: SortOrderInput | SortOrder
    idUsuario?: SortOrder
    idUsuarioTecnico?: SortOrderInput | SortOrder
    idUsuarioSupervisor?: SortOrderInput | SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    tecnico?: UsuarioTecnicoOrderByWithRelationInput
    supervisor?: UsuarioSupervisorOrderByWithRelationInput
  }

  export type ReporteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReporteWhereInput | ReporteWhereInput[]
    OR?: ReporteWhereInput[]
    NOT?: ReporteWhereInput | ReporteWhereInput[]
    titulo?: StringFilter<"Reporte"> | string
    descripcion?: StringFilter<"Reporte"> | string
    categoria?: StringFilter<"Reporte"> | string
    prioridad?: IntFilter<"Reporte"> | number
    estado?: StringFilter<"Reporte"> | string
    fechaCreacion?: DateTimeFilter<"Reporte"> | Date | string
    fechaFinalizacion?: DateTimeNullableFilter<"Reporte"> | Date | string | null
    idUsuario?: IntFilter<"Reporte"> | number
    idUsuarioTecnico?: IntNullableFilter<"Reporte"> | number | null
    idUsuarioSupervisor?: IntNullableFilter<"Reporte"> | number | null
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    tecnico?: XOR<UsuarioTecnicoNullableRelationFilter, UsuarioTecnicoWhereInput> | null
    supervisor?: XOR<UsuarioSupervisorNullableRelationFilter, UsuarioSupervisorWhereInput> | null
  }, "id">

  export type ReporteOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    categoria?: SortOrder
    prioridad?: SortOrder
    estado?: SortOrder
    fechaCreacion?: SortOrder
    fechaFinalizacion?: SortOrderInput | SortOrder
    idUsuario?: SortOrder
    idUsuarioTecnico?: SortOrderInput | SortOrder
    idUsuarioSupervisor?: SortOrderInput | SortOrder
    _count?: ReporteCountOrderByAggregateInput
    _avg?: ReporteAvgOrderByAggregateInput
    _max?: ReporteMaxOrderByAggregateInput
    _min?: ReporteMinOrderByAggregateInput
    _sum?: ReporteSumOrderByAggregateInput
  }

  export type ReporteScalarWhereWithAggregatesInput = {
    AND?: ReporteScalarWhereWithAggregatesInput | ReporteScalarWhereWithAggregatesInput[]
    OR?: ReporteScalarWhereWithAggregatesInput[]
    NOT?: ReporteScalarWhereWithAggregatesInput | ReporteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Reporte"> | number
    titulo?: StringWithAggregatesFilter<"Reporte"> | string
    descripcion?: StringWithAggregatesFilter<"Reporte"> | string
    categoria?: StringWithAggregatesFilter<"Reporte"> | string
    prioridad?: IntWithAggregatesFilter<"Reporte"> | number
    estado?: StringWithAggregatesFilter<"Reporte"> | string
    fechaCreacion?: DateTimeWithAggregatesFilter<"Reporte"> | Date | string
    fechaFinalizacion?: DateTimeNullableWithAggregatesFilter<"Reporte"> | Date | string | null
    idUsuario?: IntWithAggregatesFilter<"Reporte"> | number
    idUsuarioTecnico?: IntNullableWithAggregatesFilter<"Reporte"> | number | null
    idUsuarioSupervisor?: IntNullableWithAggregatesFilter<"Reporte"> | number | null
  }

  export type LocalidadCreateInput = {
    nombre: string
    Institucion?: OficinaCreateNestedManyWithoutLocalidadInput
  }

  export type LocalidadUncheckedCreateInput = {
    id?: number
    nombre: string
    Institucion?: OficinaUncheckedCreateNestedManyWithoutLocalidadInput
  }

  export type LocalidadUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    Institucion?: OficinaUpdateManyWithoutLocalidadNestedInput
  }

  export type LocalidadUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    Institucion?: OficinaUncheckedUpdateManyWithoutLocalidadNestedInput
  }

  export type LocalidadCreateManyInput = {
    id?: number
    nombre: string
  }

  export type LocalidadUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type LocalidadUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type InstitucionCreateInput = {
    nombre: string
    dominio: string
    oficinas?: OficinaCreateNestedManyWithoutInstitucionInput
  }

  export type InstitucionUncheckedCreateInput = {
    id?: number
    nombre: string
    dominio: string
    oficinas?: OficinaUncheckedCreateNestedManyWithoutInstitucionInput
  }

  export type InstitucionUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    dominio?: StringFieldUpdateOperationsInput | string
    oficinas?: OficinaUpdateManyWithoutInstitucionNestedInput
  }

  export type InstitucionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    dominio?: StringFieldUpdateOperationsInput | string
    oficinas?: OficinaUncheckedUpdateManyWithoutInstitucionNestedInput
  }

  export type InstitucionCreateManyInput = {
    id?: number
    nombre: string
    dominio: string
  }

  export type InstitucionUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    dominio?: StringFieldUpdateOperationsInput | string
  }

  export type InstitucionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    dominio?: StringFieldUpdateOperationsInput | string
  }

  export type OficinaCreateInput = {
    nombre: string
    direccion: string
    piso?: number | null
    Localidad: LocalidadCreateNestedOneWithoutInstitucionInput
    Institucion: InstitucionCreateNestedOneWithoutOficinasInput
    usuarios?: UsuarioCreateNestedManyWithoutOficinaInput
  }

  export type OficinaUncheckedCreateInput = {
    id?: number
    nombre: string
    direccion: string
    piso?: number | null
    idLocalidad: number
    idInstitucion: number
    usuarios?: UsuarioUncheckedCreateNestedManyWithoutOficinaInput
  }

  export type OficinaUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    piso?: NullableIntFieldUpdateOperationsInput | number | null
    Localidad?: LocalidadUpdateOneRequiredWithoutInstitucionNestedInput
    Institucion?: InstitucionUpdateOneRequiredWithoutOficinasNestedInput
    usuarios?: UsuarioUpdateManyWithoutOficinaNestedInput
  }

  export type OficinaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    piso?: NullableIntFieldUpdateOperationsInput | number | null
    idLocalidad?: IntFieldUpdateOperationsInput | number
    idInstitucion?: IntFieldUpdateOperationsInput | number
    usuarios?: UsuarioUncheckedUpdateManyWithoutOficinaNestedInput
  }

  export type OficinaCreateManyInput = {
    id?: number
    nombre: string
    direccion: string
    piso?: number | null
    idLocalidad: number
    idInstitucion: number
  }

  export type OficinaUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    piso?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OficinaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    piso?: NullableIntFieldUpdateOperationsInput | number | null
    idLocalidad?: IntFieldUpdateOperationsInput | number
    idInstitucion?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioCreateInput = {
    nombre: string
    correo: string
    oficina: OficinaCreateNestedOneWithoutUsuariosInput
    reportes?: ReporteCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    nombre: string
    correo: string
    idOficina: number
    reportes?: ReporteUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    oficina?: OficinaUpdateOneRequiredWithoutUsuariosNestedInput
    reportes?: ReporteUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    idOficina?: IntFieldUpdateOperationsInput | number
    reportes?: ReporteUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: number
    nombre: string
    correo: string
    idOficina: number
  }

  export type UsuarioUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    idOficina?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioTecnicoCreateInput = {
    nombre: string
    correo: string
    reportesSolucionados?: ReporteCreateNestedManyWithoutTecnicoInput
  }

  export type UsuarioTecnicoUncheckedCreateInput = {
    id?: number
    nombre: string
    correo: string
    reportesSolucionados?: ReporteUncheckedCreateNestedManyWithoutTecnicoInput
  }

  export type UsuarioTecnicoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    reportesSolucionados?: ReporteUpdateManyWithoutTecnicoNestedInput
  }

  export type UsuarioTecnicoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    reportesSolucionados?: ReporteUncheckedUpdateManyWithoutTecnicoNestedInput
  }

  export type UsuarioTecnicoCreateManyInput = {
    id?: number
    nombre: string
    correo: string
  }

  export type UsuarioTecnicoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioTecnicoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioSupervisorCreateInput = {
    nombre: string
    correo: string
    reportesSupervisados?: ReporteCreateNestedManyWithoutSupervisorInput
  }

  export type UsuarioSupervisorUncheckedCreateInput = {
    id?: number
    nombre: string
    correo: string
    reportesSupervisados?: ReporteUncheckedCreateNestedManyWithoutSupervisorInput
  }

  export type UsuarioSupervisorUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    reportesSupervisados?: ReporteUpdateManyWithoutSupervisorNestedInput
  }

  export type UsuarioSupervisorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    reportesSupervisados?: ReporteUncheckedUpdateManyWithoutSupervisorNestedInput
  }

  export type UsuarioSupervisorCreateManyInput = {
    id?: number
    nombre: string
    correo: string
  }

  export type UsuarioSupervisorUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioSupervisorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
  }

  export type ReporteCreateInput = {
    titulo: string
    descripcion: string
    categoria: string
    prioridad: number
    estado: string
    fechaCreacion: Date | string
    fechaFinalizacion?: Date | string | null
    usuario: UsuarioCreateNestedOneWithoutReportesInput
    tecnico?: UsuarioTecnicoCreateNestedOneWithoutReportesSolucionadosInput
    supervisor?: UsuarioSupervisorCreateNestedOneWithoutReportesSupervisadosInput
  }

  export type ReporteUncheckedCreateInput = {
    id?: number
    titulo: string
    descripcion: string
    categoria: string
    prioridad: number
    estado: string
    fechaCreacion: Date | string
    fechaFinalizacion?: Date | string | null
    idUsuario: number
    idUsuarioTecnico?: number | null
    idUsuarioSupervisor?: number | null
  }

  export type ReporteUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    prioridad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usuario?: UsuarioUpdateOneRequiredWithoutReportesNestedInput
    tecnico?: UsuarioTecnicoUpdateOneWithoutReportesSolucionadosNestedInput
    supervisor?: UsuarioSupervisorUpdateOneWithoutReportesSupervisadosNestedInput
  }

  export type ReporteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    prioridad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idUsuario?: IntFieldUpdateOperationsInput | number
    idUsuarioTecnico?: NullableIntFieldUpdateOperationsInput | number | null
    idUsuarioSupervisor?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ReporteCreateManyInput = {
    id?: number
    titulo: string
    descripcion: string
    categoria: string
    prioridad: number
    estado: string
    fechaCreacion: Date | string
    fechaFinalizacion?: Date | string | null
    idUsuario: number
    idUsuarioTecnico?: number | null
    idUsuarioSupervisor?: number | null
  }

  export type ReporteUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    prioridad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReporteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    prioridad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idUsuario?: IntFieldUpdateOperationsInput | number
    idUsuarioTecnico?: NullableIntFieldUpdateOperationsInput | number | null
    idUsuarioSupervisor?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type OficinaListRelationFilter = {
    every?: OficinaWhereInput
    some?: OficinaWhereInput
    none?: OficinaWhereInput
  }

  export type OficinaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LocalidadCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type LocalidadAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LocalidadMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type LocalidadMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type LocalidadSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type InstitucionCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    dominio?: SortOrder
  }

  export type InstitucionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type InstitucionMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    dominio?: SortOrder
  }

  export type InstitucionMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    dominio?: SortOrder
  }

  export type InstitucionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type LocalidadRelationFilter = {
    is?: LocalidadWhereInput
    isNot?: LocalidadWhereInput
  }

  export type InstitucionRelationFilter = {
    is?: InstitucionWhereInput
    isNot?: InstitucionWhereInput
  }

  export type UsuarioListRelationFilter = {
    every?: UsuarioWhereInput
    some?: UsuarioWhereInput
    none?: UsuarioWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UsuarioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OficinaCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    piso?: SortOrder
    idLocalidad?: SortOrder
    idInstitucion?: SortOrder
  }

  export type OficinaAvgOrderByAggregateInput = {
    id?: SortOrder
    piso?: SortOrder
    idLocalidad?: SortOrder
    idInstitucion?: SortOrder
  }

  export type OficinaMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    piso?: SortOrder
    idLocalidad?: SortOrder
    idInstitucion?: SortOrder
  }

  export type OficinaMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    piso?: SortOrder
    idLocalidad?: SortOrder
    idInstitucion?: SortOrder
  }

  export type OficinaSumOrderByAggregateInput = {
    id?: SortOrder
    piso?: SortOrder
    idLocalidad?: SortOrder
    idInstitucion?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type OficinaRelationFilter = {
    is?: OficinaWhereInput
    isNot?: OficinaWhereInput
  }

  export type ReporteListRelationFilter = {
    every?: ReporteWhereInput
    some?: ReporteWhereInput
    none?: ReporteWhereInput
  }

  export type ReporteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    idOficina?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
    idOficina?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    idOficina?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
    idOficina?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
    idOficina?: SortOrder
  }

  export type UsuarioTecnicoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
  }

  export type UsuarioTecnicoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioTecnicoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
  }

  export type UsuarioTecnicoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
  }

  export type UsuarioTecnicoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioSupervisorCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
  }

  export type UsuarioSupervisorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioSupervisorMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
  }

  export type UsuarioSupervisorMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    correo?: SortOrder
  }

  export type UsuarioSupervisorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UsuarioRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type UsuarioTecnicoNullableRelationFilter = {
    is?: UsuarioTecnicoWhereInput | null
    isNot?: UsuarioTecnicoWhereInput | null
  }

  export type UsuarioSupervisorNullableRelationFilter = {
    is?: UsuarioSupervisorWhereInput | null
    isNot?: UsuarioSupervisorWhereInput | null
  }

  export type ReporteCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    categoria?: SortOrder
    prioridad?: SortOrder
    estado?: SortOrder
    fechaCreacion?: SortOrder
    fechaFinalizacion?: SortOrder
    idUsuario?: SortOrder
    idUsuarioTecnico?: SortOrder
    idUsuarioSupervisor?: SortOrder
  }

  export type ReporteAvgOrderByAggregateInput = {
    id?: SortOrder
    prioridad?: SortOrder
    idUsuario?: SortOrder
    idUsuarioTecnico?: SortOrder
    idUsuarioSupervisor?: SortOrder
  }

  export type ReporteMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    categoria?: SortOrder
    prioridad?: SortOrder
    estado?: SortOrder
    fechaCreacion?: SortOrder
    fechaFinalizacion?: SortOrder
    idUsuario?: SortOrder
    idUsuarioTecnico?: SortOrder
    idUsuarioSupervisor?: SortOrder
  }

  export type ReporteMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    descripcion?: SortOrder
    categoria?: SortOrder
    prioridad?: SortOrder
    estado?: SortOrder
    fechaCreacion?: SortOrder
    fechaFinalizacion?: SortOrder
    idUsuario?: SortOrder
    idUsuarioTecnico?: SortOrder
    idUsuarioSupervisor?: SortOrder
  }

  export type ReporteSumOrderByAggregateInput = {
    id?: SortOrder
    prioridad?: SortOrder
    idUsuario?: SortOrder
    idUsuarioTecnico?: SortOrder
    idUsuarioSupervisor?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type OficinaCreateNestedManyWithoutLocalidadInput = {
    create?: XOR<OficinaCreateWithoutLocalidadInput, OficinaUncheckedCreateWithoutLocalidadInput> | OficinaCreateWithoutLocalidadInput[] | OficinaUncheckedCreateWithoutLocalidadInput[]
    connectOrCreate?: OficinaCreateOrConnectWithoutLocalidadInput | OficinaCreateOrConnectWithoutLocalidadInput[]
    createMany?: OficinaCreateManyLocalidadInputEnvelope
    connect?: OficinaWhereUniqueInput | OficinaWhereUniqueInput[]
  }

  export type OficinaUncheckedCreateNestedManyWithoutLocalidadInput = {
    create?: XOR<OficinaCreateWithoutLocalidadInput, OficinaUncheckedCreateWithoutLocalidadInput> | OficinaCreateWithoutLocalidadInput[] | OficinaUncheckedCreateWithoutLocalidadInput[]
    connectOrCreate?: OficinaCreateOrConnectWithoutLocalidadInput | OficinaCreateOrConnectWithoutLocalidadInput[]
    createMany?: OficinaCreateManyLocalidadInputEnvelope
    connect?: OficinaWhereUniqueInput | OficinaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type OficinaUpdateManyWithoutLocalidadNestedInput = {
    create?: XOR<OficinaCreateWithoutLocalidadInput, OficinaUncheckedCreateWithoutLocalidadInput> | OficinaCreateWithoutLocalidadInput[] | OficinaUncheckedCreateWithoutLocalidadInput[]
    connectOrCreate?: OficinaCreateOrConnectWithoutLocalidadInput | OficinaCreateOrConnectWithoutLocalidadInput[]
    upsert?: OficinaUpsertWithWhereUniqueWithoutLocalidadInput | OficinaUpsertWithWhereUniqueWithoutLocalidadInput[]
    createMany?: OficinaCreateManyLocalidadInputEnvelope
    set?: OficinaWhereUniqueInput | OficinaWhereUniqueInput[]
    disconnect?: OficinaWhereUniqueInput | OficinaWhereUniqueInput[]
    delete?: OficinaWhereUniqueInput | OficinaWhereUniqueInput[]
    connect?: OficinaWhereUniqueInput | OficinaWhereUniqueInput[]
    update?: OficinaUpdateWithWhereUniqueWithoutLocalidadInput | OficinaUpdateWithWhereUniqueWithoutLocalidadInput[]
    updateMany?: OficinaUpdateManyWithWhereWithoutLocalidadInput | OficinaUpdateManyWithWhereWithoutLocalidadInput[]
    deleteMany?: OficinaScalarWhereInput | OficinaScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OficinaUncheckedUpdateManyWithoutLocalidadNestedInput = {
    create?: XOR<OficinaCreateWithoutLocalidadInput, OficinaUncheckedCreateWithoutLocalidadInput> | OficinaCreateWithoutLocalidadInput[] | OficinaUncheckedCreateWithoutLocalidadInput[]
    connectOrCreate?: OficinaCreateOrConnectWithoutLocalidadInput | OficinaCreateOrConnectWithoutLocalidadInput[]
    upsert?: OficinaUpsertWithWhereUniqueWithoutLocalidadInput | OficinaUpsertWithWhereUniqueWithoutLocalidadInput[]
    createMany?: OficinaCreateManyLocalidadInputEnvelope
    set?: OficinaWhereUniqueInput | OficinaWhereUniqueInput[]
    disconnect?: OficinaWhereUniqueInput | OficinaWhereUniqueInput[]
    delete?: OficinaWhereUniqueInput | OficinaWhereUniqueInput[]
    connect?: OficinaWhereUniqueInput | OficinaWhereUniqueInput[]
    update?: OficinaUpdateWithWhereUniqueWithoutLocalidadInput | OficinaUpdateWithWhereUniqueWithoutLocalidadInput[]
    updateMany?: OficinaUpdateManyWithWhereWithoutLocalidadInput | OficinaUpdateManyWithWhereWithoutLocalidadInput[]
    deleteMany?: OficinaScalarWhereInput | OficinaScalarWhereInput[]
  }

  export type OficinaCreateNestedManyWithoutInstitucionInput = {
    create?: XOR<OficinaCreateWithoutInstitucionInput, OficinaUncheckedCreateWithoutInstitucionInput> | OficinaCreateWithoutInstitucionInput[] | OficinaUncheckedCreateWithoutInstitucionInput[]
    connectOrCreate?: OficinaCreateOrConnectWithoutInstitucionInput | OficinaCreateOrConnectWithoutInstitucionInput[]
    createMany?: OficinaCreateManyInstitucionInputEnvelope
    connect?: OficinaWhereUniqueInput | OficinaWhereUniqueInput[]
  }

  export type OficinaUncheckedCreateNestedManyWithoutInstitucionInput = {
    create?: XOR<OficinaCreateWithoutInstitucionInput, OficinaUncheckedCreateWithoutInstitucionInput> | OficinaCreateWithoutInstitucionInput[] | OficinaUncheckedCreateWithoutInstitucionInput[]
    connectOrCreate?: OficinaCreateOrConnectWithoutInstitucionInput | OficinaCreateOrConnectWithoutInstitucionInput[]
    createMany?: OficinaCreateManyInstitucionInputEnvelope
    connect?: OficinaWhereUniqueInput | OficinaWhereUniqueInput[]
  }

  export type OficinaUpdateManyWithoutInstitucionNestedInput = {
    create?: XOR<OficinaCreateWithoutInstitucionInput, OficinaUncheckedCreateWithoutInstitucionInput> | OficinaCreateWithoutInstitucionInput[] | OficinaUncheckedCreateWithoutInstitucionInput[]
    connectOrCreate?: OficinaCreateOrConnectWithoutInstitucionInput | OficinaCreateOrConnectWithoutInstitucionInput[]
    upsert?: OficinaUpsertWithWhereUniqueWithoutInstitucionInput | OficinaUpsertWithWhereUniqueWithoutInstitucionInput[]
    createMany?: OficinaCreateManyInstitucionInputEnvelope
    set?: OficinaWhereUniqueInput | OficinaWhereUniqueInput[]
    disconnect?: OficinaWhereUniqueInput | OficinaWhereUniqueInput[]
    delete?: OficinaWhereUniqueInput | OficinaWhereUniqueInput[]
    connect?: OficinaWhereUniqueInput | OficinaWhereUniqueInput[]
    update?: OficinaUpdateWithWhereUniqueWithoutInstitucionInput | OficinaUpdateWithWhereUniqueWithoutInstitucionInput[]
    updateMany?: OficinaUpdateManyWithWhereWithoutInstitucionInput | OficinaUpdateManyWithWhereWithoutInstitucionInput[]
    deleteMany?: OficinaScalarWhereInput | OficinaScalarWhereInput[]
  }

  export type OficinaUncheckedUpdateManyWithoutInstitucionNestedInput = {
    create?: XOR<OficinaCreateWithoutInstitucionInput, OficinaUncheckedCreateWithoutInstitucionInput> | OficinaCreateWithoutInstitucionInput[] | OficinaUncheckedCreateWithoutInstitucionInput[]
    connectOrCreate?: OficinaCreateOrConnectWithoutInstitucionInput | OficinaCreateOrConnectWithoutInstitucionInput[]
    upsert?: OficinaUpsertWithWhereUniqueWithoutInstitucionInput | OficinaUpsertWithWhereUniqueWithoutInstitucionInput[]
    createMany?: OficinaCreateManyInstitucionInputEnvelope
    set?: OficinaWhereUniqueInput | OficinaWhereUniqueInput[]
    disconnect?: OficinaWhereUniqueInput | OficinaWhereUniqueInput[]
    delete?: OficinaWhereUniqueInput | OficinaWhereUniqueInput[]
    connect?: OficinaWhereUniqueInput | OficinaWhereUniqueInput[]
    update?: OficinaUpdateWithWhereUniqueWithoutInstitucionInput | OficinaUpdateWithWhereUniqueWithoutInstitucionInput[]
    updateMany?: OficinaUpdateManyWithWhereWithoutInstitucionInput | OficinaUpdateManyWithWhereWithoutInstitucionInput[]
    deleteMany?: OficinaScalarWhereInput | OficinaScalarWhereInput[]
  }

  export type LocalidadCreateNestedOneWithoutInstitucionInput = {
    create?: XOR<LocalidadCreateWithoutInstitucionInput, LocalidadUncheckedCreateWithoutInstitucionInput>
    connectOrCreate?: LocalidadCreateOrConnectWithoutInstitucionInput
    connect?: LocalidadWhereUniqueInput
  }

  export type InstitucionCreateNestedOneWithoutOficinasInput = {
    create?: XOR<InstitucionCreateWithoutOficinasInput, InstitucionUncheckedCreateWithoutOficinasInput>
    connectOrCreate?: InstitucionCreateOrConnectWithoutOficinasInput
    connect?: InstitucionWhereUniqueInput
  }

  export type UsuarioCreateNestedManyWithoutOficinaInput = {
    create?: XOR<UsuarioCreateWithoutOficinaInput, UsuarioUncheckedCreateWithoutOficinaInput> | UsuarioCreateWithoutOficinaInput[] | UsuarioUncheckedCreateWithoutOficinaInput[]
    connectOrCreate?: UsuarioCreateOrConnectWithoutOficinaInput | UsuarioCreateOrConnectWithoutOficinaInput[]
    createMany?: UsuarioCreateManyOficinaInputEnvelope
    connect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
  }

  export type UsuarioUncheckedCreateNestedManyWithoutOficinaInput = {
    create?: XOR<UsuarioCreateWithoutOficinaInput, UsuarioUncheckedCreateWithoutOficinaInput> | UsuarioCreateWithoutOficinaInput[] | UsuarioUncheckedCreateWithoutOficinaInput[]
    connectOrCreate?: UsuarioCreateOrConnectWithoutOficinaInput | UsuarioCreateOrConnectWithoutOficinaInput[]
    createMany?: UsuarioCreateManyOficinaInputEnvelope
    connect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LocalidadUpdateOneRequiredWithoutInstitucionNestedInput = {
    create?: XOR<LocalidadCreateWithoutInstitucionInput, LocalidadUncheckedCreateWithoutInstitucionInput>
    connectOrCreate?: LocalidadCreateOrConnectWithoutInstitucionInput
    upsert?: LocalidadUpsertWithoutInstitucionInput
    connect?: LocalidadWhereUniqueInput
    update?: XOR<XOR<LocalidadUpdateToOneWithWhereWithoutInstitucionInput, LocalidadUpdateWithoutInstitucionInput>, LocalidadUncheckedUpdateWithoutInstitucionInput>
  }

  export type InstitucionUpdateOneRequiredWithoutOficinasNestedInput = {
    create?: XOR<InstitucionCreateWithoutOficinasInput, InstitucionUncheckedCreateWithoutOficinasInput>
    connectOrCreate?: InstitucionCreateOrConnectWithoutOficinasInput
    upsert?: InstitucionUpsertWithoutOficinasInput
    connect?: InstitucionWhereUniqueInput
    update?: XOR<XOR<InstitucionUpdateToOneWithWhereWithoutOficinasInput, InstitucionUpdateWithoutOficinasInput>, InstitucionUncheckedUpdateWithoutOficinasInput>
  }

  export type UsuarioUpdateManyWithoutOficinaNestedInput = {
    create?: XOR<UsuarioCreateWithoutOficinaInput, UsuarioUncheckedCreateWithoutOficinaInput> | UsuarioCreateWithoutOficinaInput[] | UsuarioUncheckedCreateWithoutOficinaInput[]
    connectOrCreate?: UsuarioCreateOrConnectWithoutOficinaInput | UsuarioCreateOrConnectWithoutOficinaInput[]
    upsert?: UsuarioUpsertWithWhereUniqueWithoutOficinaInput | UsuarioUpsertWithWhereUniqueWithoutOficinaInput[]
    createMany?: UsuarioCreateManyOficinaInputEnvelope
    set?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    disconnect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    delete?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    connect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    update?: UsuarioUpdateWithWhereUniqueWithoutOficinaInput | UsuarioUpdateWithWhereUniqueWithoutOficinaInput[]
    updateMany?: UsuarioUpdateManyWithWhereWithoutOficinaInput | UsuarioUpdateManyWithWhereWithoutOficinaInput[]
    deleteMany?: UsuarioScalarWhereInput | UsuarioScalarWhereInput[]
  }

  export type UsuarioUncheckedUpdateManyWithoutOficinaNestedInput = {
    create?: XOR<UsuarioCreateWithoutOficinaInput, UsuarioUncheckedCreateWithoutOficinaInput> | UsuarioCreateWithoutOficinaInput[] | UsuarioUncheckedCreateWithoutOficinaInput[]
    connectOrCreate?: UsuarioCreateOrConnectWithoutOficinaInput | UsuarioCreateOrConnectWithoutOficinaInput[]
    upsert?: UsuarioUpsertWithWhereUniqueWithoutOficinaInput | UsuarioUpsertWithWhereUniqueWithoutOficinaInput[]
    createMany?: UsuarioCreateManyOficinaInputEnvelope
    set?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    disconnect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    delete?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    connect?: UsuarioWhereUniqueInput | UsuarioWhereUniqueInput[]
    update?: UsuarioUpdateWithWhereUniqueWithoutOficinaInput | UsuarioUpdateWithWhereUniqueWithoutOficinaInput[]
    updateMany?: UsuarioUpdateManyWithWhereWithoutOficinaInput | UsuarioUpdateManyWithWhereWithoutOficinaInput[]
    deleteMany?: UsuarioScalarWhereInput | UsuarioScalarWhereInput[]
  }

  export type OficinaCreateNestedOneWithoutUsuariosInput = {
    create?: XOR<OficinaCreateWithoutUsuariosInput, OficinaUncheckedCreateWithoutUsuariosInput>
    connectOrCreate?: OficinaCreateOrConnectWithoutUsuariosInput
    connect?: OficinaWhereUniqueInput
  }

  export type ReporteCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ReporteCreateWithoutUsuarioInput, ReporteUncheckedCreateWithoutUsuarioInput> | ReporteCreateWithoutUsuarioInput[] | ReporteUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ReporteCreateOrConnectWithoutUsuarioInput | ReporteCreateOrConnectWithoutUsuarioInput[]
    createMany?: ReporteCreateManyUsuarioInputEnvelope
    connect?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
  }

  export type ReporteUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ReporteCreateWithoutUsuarioInput, ReporteUncheckedCreateWithoutUsuarioInput> | ReporteCreateWithoutUsuarioInput[] | ReporteUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ReporteCreateOrConnectWithoutUsuarioInput | ReporteCreateOrConnectWithoutUsuarioInput[]
    createMany?: ReporteCreateManyUsuarioInputEnvelope
    connect?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
  }

  export type OficinaUpdateOneRequiredWithoutUsuariosNestedInput = {
    create?: XOR<OficinaCreateWithoutUsuariosInput, OficinaUncheckedCreateWithoutUsuariosInput>
    connectOrCreate?: OficinaCreateOrConnectWithoutUsuariosInput
    upsert?: OficinaUpsertWithoutUsuariosInput
    connect?: OficinaWhereUniqueInput
    update?: XOR<XOR<OficinaUpdateToOneWithWhereWithoutUsuariosInput, OficinaUpdateWithoutUsuariosInput>, OficinaUncheckedUpdateWithoutUsuariosInput>
  }

  export type ReporteUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ReporteCreateWithoutUsuarioInput, ReporteUncheckedCreateWithoutUsuarioInput> | ReporteCreateWithoutUsuarioInput[] | ReporteUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ReporteCreateOrConnectWithoutUsuarioInput | ReporteCreateOrConnectWithoutUsuarioInput[]
    upsert?: ReporteUpsertWithWhereUniqueWithoutUsuarioInput | ReporteUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ReporteCreateManyUsuarioInputEnvelope
    set?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    disconnect?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    delete?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    connect?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    update?: ReporteUpdateWithWhereUniqueWithoutUsuarioInput | ReporteUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ReporteUpdateManyWithWhereWithoutUsuarioInput | ReporteUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ReporteScalarWhereInput | ReporteScalarWhereInput[]
  }

  export type ReporteUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ReporteCreateWithoutUsuarioInput, ReporteUncheckedCreateWithoutUsuarioInput> | ReporteCreateWithoutUsuarioInput[] | ReporteUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ReporteCreateOrConnectWithoutUsuarioInput | ReporteCreateOrConnectWithoutUsuarioInput[]
    upsert?: ReporteUpsertWithWhereUniqueWithoutUsuarioInput | ReporteUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ReporteCreateManyUsuarioInputEnvelope
    set?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    disconnect?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    delete?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    connect?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    update?: ReporteUpdateWithWhereUniqueWithoutUsuarioInput | ReporteUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ReporteUpdateManyWithWhereWithoutUsuarioInput | ReporteUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ReporteScalarWhereInput | ReporteScalarWhereInput[]
  }

  export type ReporteCreateNestedManyWithoutTecnicoInput = {
    create?: XOR<ReporteCreateWithoutTecnicoInput, ReporteUncheckedCreateWithoutTecnicoInput> | ReporteCreateWithoutTecnicoInput[] | ReporteUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: ReporteCreateOrConnectWithoutTecnicoInput | ReporteCreateOrConnectWithoutTecnicoInput[]
    createMany?: ReporteCreateManyTecnicoInputEnvelope
    connect?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
  }

  export type ReporteUncheckedCreateNestedManyWithoutTecnicoInput = {
    create?: XOR<ReporteCreateWithoutTecnicoInput, ReporteUncheckedCreateWithoutTecnicoInput> | ReporteCreateWithoutTecnicoInput[] | ReporteUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: ReporteCreateOrConnectWithoutTecnicoInput | ReporteCreateOrConnectWithoutTecnicoInput[]
    createMany?: ReporteCreateManyTecnicoInputEnvelope
    connect?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
  }

  export type ReporteUpdateManyWithoutTecnicoNestedInput = {
    create?: XOR<ReporteCreateWithoutTecnicoInput, ReporteUncheckedCreateWithoutTecnicoInput> | ReporteCreateWithoutTecnicoInput[] | ReporteUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: ReporteCreateOrConnectWithoutTecnicoInput | ReporteCreateOrConnectWithoutTecnicoInput[]
    upsert?: ReporteUpsertWithWhereUniqueWithoutTecnicoInput | ReporteUpsertWithWhereUniqueWithoutTecnicoInput[]
    createMany?: ReporteCreateManyTecnicoInputEnvelope
    set?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    disconnect?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    delete?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    connect?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    update?: ReporteUpdateWithWhereUniqueWithoutTecnicoInput | ReporteUpdateWithWhereUniqueWithoutTecnicoInput[]
    updateMany?: ReporteUpdateManyWithWhereWithoutTecnicoInput | ReporteUpdateManyWithWhereWithoutTecnicoInput[]
    deleteMany?: ReporteScalarWhereInput | ReporteScalarWhereInput[]
  }

  export type ReporteUncheckedUpdateManyWithoutTecnicoNestedInput = {
    create?: XOR<ReporteCreateWithoutTecnicoInput, ReporteUncheckedCreateWithoutTecnicoInput> | ReporteCreateWithoutTecnicoInput[] | ReporteUncheckedCreateWithoutTecnicoInput[]
    connectOrCreate?: ReporteCreateOrConnectWithoutTecnicoInput | ReporteCreateOrConnectWithoutTecnicoInput[]
    upsert?: ReporteUpsertWithWhereUniqueWithoutTecnicoInput | ReporteUpsertWithWhereUniqueWithoutTecnicoInput[]
    createMany?: ReporteCreateManyTecnicoInputEnvelope
    set?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    disconnect?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    delete?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    connect?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    update?: ReporteUpdateWithWhereUniqueWithoutTecnicoInput | ReporteUpdateWithWhereUniqueWithoutTecnicoInput[]
    updateMany?: ReporteUpdateManyWithWhereWithoutTecnicoInput | ReporteUpdateManyWithWhereWithoutTecnicoInput[]
    deleteMany?: ReporteScalarWhereInput | ReporteScalarWhereInput[]
  }

  export type ReporteCreateNestedManyWithoutSupervisorInput = {
    create?: XOR<ReporteCreateWithoutSupervisorInput, ReporteUncheckedCreateWithoutSupervisorInput> | ReporteCreateWithoutSupervisorInput[] | ReporteUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: ReporteCreateOrConnectWithoutSupervisorInput | ReporteCreateOrConnectWithoutSupervisorInput[]
    createMany?: ReporteCreateManySupervisorInputEnvelope
    connect?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
  }

  export type ReporteUncheckedCreateNestedManyWithoutSupervisorInput = {
    create?: XOR<ReporteCreateWithoutSupervisorInput, ReporteUncheckedCreateWithoutSupervisorInput> | ReporteCreateWithoutSupervisorInput[] | ReporteUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: ReporteCreateOrConnectWithoutSupervisorInput | ReporteCreateOrConnectWithoutSupervisorInput[]
    createMany?: ReporteCreateManySupervisorInputEnvelope
    connect?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
  }

  export type ReporteUpdateManyWithoutSupervisorNestedInput = {
    create?: XOR<ReporteCreateWithoutSupervisorInput, ReporteUncheckedCreateWithoutSupervisorInput> | ReporteCreateWithoutSupervisorInput[] | ReporteUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: ReporteCreateOrConnectWithoutSupervisorInput | ReporteCreateOrConnectWithoutSupervisorInput[]
    upsert?: ReporteUpsertWithWhereUniqueWithoutSupervisorInput | ReporteUpsertWithWhereUniqueWithoutSupervisorInput[]
    createMany?: ReporteCreateManySupervisorInputEnvelope
    set?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    disconnect?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    delete?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    connect?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    update?: ReporteUpdateWithWhereUniqueWithoutSupervisorInput | ReporteUpdateWithWhereUniqueWithoutSupervisorInput[]
    updateMany?: ReporteUpdateManyWithWhereWithoutSupervisorInput | ReporteUpdateManyWithWhereWithoutSupervisorInput[]
    deleteMany?: ReporteScalarWhereInput | ReporteScalarWhereInput[]
  }

  export type ReporteUncheckedUpdateManyWithoutSupervisorNestedInput = {
    create?: XOR<ReporteCreateWithoutSupervisorInput, ReporteUncheckedCreateWithoutSupervisorInput> | ReporteCreateWithoutSupervisorInput[] | ReporteUncheckedCreateWithoutSupervisorInput[]
    connectOrCreate?: ReporteCreateOrConnectWithoutSupervisorInput | ReporteCreateOrConnectWithoutSupervisorInput[]
    upsert?: ReporteUpsertWithWhereUniqueWithoutSupervisorInput | ReporteUpsertWithWhereUniqueWithoutSupervisorInput[]
    createMany?: ReporteCreateManySupervisorInputEnvelope
    set?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    disconnect?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    delete?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    connect?: ReporteWhereUniqueInput | ReporteWhereUniqueInput[]
    update?: ReporteUpdateWithWhereUniqueWithoutSupervisorInput | ReporteUpdateWithWhereUniqueWithoutSupervisorInput[]
    updateMany?: ReporteUpdateManyWithWhereWithoutSupervisorInput | ReporteUpdateManyWithWhereWithoutSupervisorInput[]
    deleteMany?: ReporteScalarWhereInput | ReporteScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutReportesInput = {
    create?: XOR<UsuarioCreateWithoutReportesInput, UsuarioUncheckedCreateWithoutReportesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutReportesInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioTecnicoCreateNestedOneWithoutReportesSolucionadosInput = {
    create?: XOR<UsuarioTecnicoCreateWithoutReportesSolucionadosInput, UsuarioTecnicoUncheckedCreateWithoutReportesSolucionadosInput>
    connectOrCreate?: UsuarioTecnicoCreateOrConnectWithoutReportesSolucionadosInput
    connect?: UsuarioTecnicoWhereUniqueInput
  }

  export type UsuarioSupervisorCreateNestedOneWithoutReportesSupervisadosInput = {
    create?: XOR<UsuarioSupervisorCreateWithoutReportesSupervisadosInput, UsuarioSupervisorUncheckedCreateWithoutReportesSupervisadosInput>
    connectOrCreate?: UsuarioSupervisorCreateOrConnectWithoutReportesSupervisadosInput
    connect?: UsuarioSupervisorWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UsuarioUpdateOneRequiredWithoutReportesNestedInput = {
    create?: XOR<UsuarioCreateWithoutReportesInput, UsuarioUncheckedCreateWithoutReportesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutReportesInput
    upsert?: UsuarioUpsertWithoutReportesInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutReportesInput, UsuarioUpdateWithoutReportesInput>, UsuarioUncheckedUpdateWithoutReportesInput>
  }

  export type UsuarioTecnicoUpdateOneWithoutReportesSolucionadosNestedInput = {
    create?: XOR<UsuarioTecnicoCreateWithoutReportesSolucionadosInput, UsuarioTecnicoUncheckedCreateWithoutReportesSolucionadosInput>
    connectOrCreate?: UsuarioTecnicoCreateOrConnectWithoutReportesSolucionadosInput
    upsert?: UsuarioTecnicoUpsertWithoutReportesSolucionadosInput
    disconnect?: UsuarioTecnicoWhereInput | boolean
    delete?: UsuarioTecnicoWhereInput | boolean
    connect?: UsuarioTecnicoWhereUniqueInput
    update?: XOR<XOR<UsuarioTecnicoUpdateToOneWithWhereWithoutReportesSolucionadosInput, UsuarioTecnicoUpdateWithoutReportesSolucionadosInput>, UsuarioTecnicoUncheckedUpdateWithoutReportesSolucionadosInput>
  }

  export type UsuarioSupervisorUpdateOneWithoutReportesSupervisadosNestedInput = {
    create?: XOR<UsuarioSupervisorCreateWithoutReportesSupervisadosInput, UsuarioSupervisorUncheckedCreateWithoutReportesSupervisadosInput>
    connectOrCreate?: UsuarioSupervisorCreateOrConnectWithoutReportesSupervisadosInput
    upsert?: UsuarioSupervisorUpsertWithoutReportesSupervisadosInput
    disconnect?: UsuarioSupervisorWhereInput | boolean
    delete?: UsuarioSupervisorWhereInput | boolean
    connect?: UsuarioSupervisorWhereUniqueInput
    update?: XOR<XOR<UsuarioSupervisorUpdateToOneWithWhereWithoutReportesSupervisadosInput, UsuarioSupervisorUpdateWithoutReportesSupervisadosInput>, UsuarioSupervisorUncheckedUpdateWithoutReportesSupervisadosInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type OficinaCreateWithoutLocalidadInput = {
    nombre: string
    direccion: string
    piso?: number | null
    Institucion: InstitucionCreateNestedOneWithoutOficinasInput
    usuarios?: UsuarioCreateNestedManyWithoutOficinaInput
  }

  export type OficinaUncheckedCreateWithoutLocalidadInput = {
    id?: number
    nombre: string
    direccion: string
    piso?: number | null
    idInstitucion: number
    usuarios?: UsuarioUncheckedCreateNestedManyWithoutOficinaInput
  }

  export type OficinaCreateOrConnectWithoutLocalidadInput = {
    where: OficinaWhereUniqueInput
    create: XOR<OficinaCreateWithoutLocalidadInput, OficinaUncheckedCreateWithoutLocalidadInput>
  }

  export type OficinaCreateManyLocalidadInputEnvelope = {
    data: OficinaCreateManyLocalidadInput | OficinaCreateManyLocalidadInput[]
    skipDuplicates?: boolean
  }

  export type OficinaUpsertWithWhereUniqueWithoutLocalidadInput = {
    where: OficinaWhereUniqueInput
    update: XOR<OficinaUpdateWithoutLocalidadInput, OficinaUncheckedUpdateWithoutLocalidadInput>
    create: XOR<OficinaCreateWithoutLocalidadInput, OficinaUncheckedCreateWithoutLocalidadInput>
  }

  export type OficinaUpdateWithWhereUniqueWithoutLocalidadInput = {
    where: OficinaWhereUniqueInput
    data: XOR<OficinaUpdateWithoutLocalidadInput, OficinaUncheckedUpdateWithoutLocalidadInput>
  }

  export type OficinaUpdateManyWithWhereWithoutLocalidadInput = {
    where: OficinaScalarWhereInput
    data: XOR<OficinaUpdateManyMutationInput, OficinaUncheckedUpdateManyWithoutLocalidadInput>
  }

  export type OficinaScalarWhereInput = {
    AND?: OficinaScalarWhereInput | OficinaScalarWhereInput[]
    OR?: OficinaScalarWhereInput[]
    NOT?: OficinaScalarWhereInput | OficinaScalarWhereInput[]
    id?: IntFilter<"Oficina"> | number
    nombre?: StringFilter<"Oficina"> | string
    direccion?: StringFilter<"Oficina"> | string
    piso?: IntNullableFilter<"Oficina"> | number | null
    idLocalidad?: IntFilter<"Oficina"> | number
    idInstitucion?: IntFilter<"Oficina"> | number
  }

  export type OficinaCreateWithoutInstitucionInput = {
    nombre: string
    direccion: string
    piso?: number | null
    Localidad: LocalidadCreateNestedOneWithoutInstitucionInput
    usuarios?: UsuarioCreateNestedManyWithoutOficinaInput
  }

  export type OficinaUncheckedCreateWithoutInstitucionInput = {
    id?: number
    nombre: string
    direccion: string
    piso?: number | null
    idLocalidad: number
    usuarios?: UsuarioUncheckedCreateNestedManyWithoutOficinaInput
  }

  export type OficinaCreateOrConnectWithoutInstitucionInput = {
    where: OficinaWhereUniqueInput
    create: XOR<OficinaCreateWithoutInstitucionInput, OficinaUncheckedCreateWithoutInstitucionInput>
  }

  export type OficinaCreateManyInstitucionInputEnvelope = {
    data: OficinaCreateManyInstitucionInput | OficinaCreateManyInstitucionInput[]
    skipDuplicates?: boolean
  }

  export type OficinaUpsertWithWhereUniqueWithoutInstitucionInput = {
    where: OficinaWhereUniqueInput
    update: XOR<OficinaUpdateWithoutInstitucionInput, OficinaUncheckedUpdateWithoutInstitucionInput>
    create: XOR<OficinaCreateWithoutInstitucionInput, OficinaUncheckedCreateWithoutInstitucionInput>
  }

  export type OficinaUpdateWithWhereUniqueWithoutInstitucionInput = {
    where: OficinaWhereUniqueInput
    data: XOR<OficinaUpdateWithoutInstitucionInput, OficinaUncheckedUpdateWithoutInstitucionInput>
  }

  export type OficinaUpdateManyWithWhereWithoutInstitucionInput = {
    where: OficinaScalarWhereInput
    data: XOR<OficinaUpdateManyMutationInput, OficinaUncheckedUpdateManyWithoutInstitucionInput>
  }

  export type LocalidadCreateWithoutInstitucionInput = {
    nombre: string
  }

  export type LocalidadUncheckedCreateWithoutInstitucionInput = {
    id?: number
    nombre: string
  }

  export type LocalidadCreateOrConnectWithoutInstitucionInput = {
    where: LocalidadWhereUniqueInput
    create: XOR<LocalidadCreateWithoutInstitucionInput, LocalidadUncheckedCreateWithoutInstitucionInput>
  }

  export type InstitucionCreateWithoutOficinasInput = {
    nombre: string
    dominio: string
  }

  export type InstitucionUncheckedCreateWithoutOficinasInput = {
    id?: number
    nombre: string
    dominio: string
  }

  export type InstitucionCreateOrConnectWithoutOficinasInput = {
    where: InstitucionWhereUniqueInput
    create: XOR<InstitucionCreateWithoutOficinasInput, InstitucionUncheckedCreateWithoutOficinasInput>
  }

  export type UsuarioCreateWithoutOficinaInput = {
    nombre: string
    correo: string
    reportes?: ReporteCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutOficinaInput = {
    id?: number
    nombre: string
    correo: string
    reportes?: ReporteUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutOficinaInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutOficinaInput, UsuarioUncheckedCreateWithoutOficinaInput>
  }

  export type UsuarioCreateManyOficinaInputEnvelope = {
    data: UsuarioCreateManyOficinaInput | UsuarioCreateManyOficinaInput[]
    skipDuplicates?: boolean
  }

  export type LocalidadUpsertWithoutInstitucionInput = {
    update: XOR<LocalidadUpdateWithoutInstitucionInput, LocalidadUncheckedUpdateWithoutInstitucionInput>
    create: XOR<LocalidadCreateWithoutInstitucionInput, LocalidadUncheckedCreateWithoutInstitucionInput>
    where?: LocalidadWhereInput
  }

  export type LocalidadUpdateToOneWithWhereWithoutInstitucionInput = {
    where?: LocalidadWhereInput
    data: XOR<LocalidadUpdateWithoutInstitucionInput, LocalidadUncheckedUpdateWithoutInstitucionInput>
  }

  export type LocalidadUpdateWithoutInstitucionInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type LocalidadUncheckedUpdateWithoutInstitucionInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type InstitucionUpsertWithoutOficinasInput = {
    update: XOR<InstitucionUpdateWithoutOficinasInput, InstitucionUncheckedUpdateWithoutOficinasInput>
    create: XOR<InstitucionCreateWithoutOficinasInput, InstitucionUncheckedCreateWithoutOficinasInput>
    where?: InstitucionWhereInput
  }

  export type InstitucionUpdateToOneWithWhereWithoutOficinasInput = {
    where?: InstitucionWhereInput
    data: XOR<InstitucionUpdateWithoutOficinasInput, InstitucionUncheckedUpdateWithoutOficinasInput>
  }

  export type InstitucionUpdateWithoutOficinasInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    dominio?: StringFieldUpdateOperationsInput | string
  }

  export type InstitucionUncheckedUpdateWithoutOficinasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    dominio?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUpsertWithWhereUniqueWithoutOficinaInput = {
    where: UsuarioWhereUniqueInput
    update: XOR<UsuarioUpdateWithoutOficinaInput, UsuarioUncheckedUpdateWithoutOficinaInput>
    create: XOR<UsuarioCreateWithoutOficinaInput, UsuarioUncheckedCreateWithoutOficinaInput>
  }

  export type UsuarioUpdateWithWhereUniqueWithoutOficinaInput = {
    where: UsuarioWhereUniqueInput
    data: XOR<UsuarioUpdateWithoutOficinaInput, UsuarioUncheckedUpdateWithoutOficinaInput>
  }

  export type UsuarioUpdateManyWithWhereWithoutOficinaInput = {
    where: UsuarioScalarWhereInput
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyWithoutOficinaInput>
  }

  export type UsuarioScalarWhereInput = {
    AND?: UsuarioScalarWhereInput | UsuarioScalarWhereInput[]
    OR?: UsuarioScalarWhereInput[]
    NOT?: UsuarioScalarWhereInput | UsuarioScalarWhereInput[]
    id?: IntFilter<"Usuario"> | number
    nombre?: StringFilter<"Usuario"> | string
    correo?: StringFilter<"Usuario"> | string
    idOficina?: IntFilter<"Usuario"> | number
  }

  export type OficinaCreateWithoutUsuariosInput = {
    nombre: string
    direccion: string
    piso?: number | null
    Localidad: LocalidadCreateNestedOneWithoutInstitucionInput
    Institucion: InstitucionCreateNestedOneWithoutOficinasInput
  }

  export type OficinaUncheckedCreateWithoutUsuariosInput = {
    id?: number
    nombre: string
    direccion: string
    piso?: number | null
    idLocalidad: number
    idInstitucion: number
  }

  export type OficinaCreateOrConnectWithoutUsuariosInput = {
    where: OficinaWhereUniqueInput
    create: XOR<OficinaCreateWithoutUsuariosInput, OficinaUncheckedCreateWithoutUsuariosInput>
  }

  export type ReporteCreateWithoutUsuarioInput = {
    titulo: string
    descripcion: string
    categoria: string
    prioridad: number
    estado: string
    fechaCreacion: Date | string
    fechaFinalizacion?: Date | string | null
    tecnico?: UsuarioTecnicoCreateNestedOneWithoutReportesSolucionadosInput
    supervisor?: UsuarioSupervisorCreateNestedOneWithoutReportesSupervisadosInput
  }

  export type ReporteUncheckedCreateWithoutUsuarioInput = {
    id?: number
    titulo: string
    descripcion: string
    categoria: string
    prioridad: number
    estado: string
    fechaCreacion: Date | string
    fechaFinalizacion?: Date | string | null
    idUsuarioTecnico?: number | null
    idUsuarioSupervisor?: number | null
  }

  export type ReporteCreateOrConnectWithoutUsuarioInput = {
    where: ReporteWhereUniqueInput
    create: XOR<ReporteCreateWithoutUsuarioInput, ReporteUncheckedCreateWithoutUsuarioInput>
  }

  export type ReporteCreateManyUsuarioInputEnvelope = {
    data: ReporteCreateManyUsuarioInput | ReporteCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type OficinaUpsertWithoutUsuariosInput = {
    update: XOR<OficinaUpdateWithoutUsuariosInput, OficinaUncheckedUpdateWithoutUsuariosInput>
    create: XOR<OficinaCreateWithoutUsuariosInput, OficinaUncheckedCreateWithoutUsuariosInput>
    where?: OficinaWhereInput
  }

  export type OficinaUpdateToOneWithWhereWithoutUsuariosInput = {
    where?: OficinaWhereInput
    data: XOR<OficinaUpdateWithoutUsuariosInput, OficinaUncheckedUpdateWithoutUsuariosInput>
  }

  export type OficinaUpdateWithoutUsuariosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    piso?: NullableIntFieldUpdateOperationsInput | number | null
    Localidad?: LocalidadUpdateOneRequiredWithoutInstitucionNestedInput
    Institucion?: InstitucionUpdateOneRequiredWithoutOficinasNestedInput
  }

  export type OficinaUncheckedUpdateWithoutUsuariosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    piso?: NullableIntFieldUpdateOperationsInput | number | null
    idLocalidad?: IntFieldUpdateOperationsInput | number
    idInstitucion?: IntFieldUpdateOperationsInput | number
  }

  export type ReporteUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: ReporteWhereUniqueInput
    update: XOR<ReporteUpdateWithoutUsuarioInput, ReporteUncheckedUpdateWithoutUsuarioInput>
    create: XOR<ReporteCreateWithoutUsuarioInput, ReporteUncheckedCreateWithoutUsuarioInput>
  }

  export type ReporteUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: ReporteWhereUniqueInput
    data: XOR<ReporteUpdateWithoutUsuarioInput, ReporteUncheckedUpdateWithoutUsuarioInput>
  }

  export type ReporteUpdateManyWithWhereWithoutUsuarioInput = {
    where: ReporteScalarWhereInput
    data: XOR<ReporteUpdateManyMutationInput, ReporteUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type ReporteScalarWhereInput = {
    AND?: ReporteScalarWhereInput | ReporteScalarWhereInput[]
    OR?: ReporteScalarWhereInput[]
    NOT?: ReporteScalarWhereInput | ReporteScalarWhereInput[]
    id?: IntFilter<"Reporte"> | number
    titulo?: StringFilter<"Reporte"> | string
    descripcion?: StringFilter<"Reporte"> | string
    categoria?: StringFilter<"Reporte"> | string
    prioridad?: IntFilter<"Reporte"> | number
    estado?: StringFilter<"Reporte"> | string
    fechaCreacion?: DateTimeFilter<"Reporte"> | Date | string
    fechaFinalizacion?: DateTimeNullableFilter<"Reporte"> | Date | string | null
    idUsuario?: IntFilter<"Reporte"> | number
    idUsuarioTecnico?: IntNullableFilter<"Reporte"> | number | null
    idUsuarioSupervisor?: IntNullableFilter<"Reporte"> | number | null
  }

  export type ReporteCreateWithoutTecnicoInput = {
    titulo: string
    descripcion: string
    categoria: string
    prioridad: number
    estado: string
    fechaCreacion: Date | string
    fechaFinalizacion?: Date | string | null
    usuario: UsuarioCreateNestedOneWithoutReportesInput
    supervisor?: UsuarioSupervisorCreateNestedOneWithoutReportesSupervisadosInput
  }

  export type ReporteUncheckedCreateWithoutTecnicoInput = {
    id?: number
    titulo: string
    descripcion: string
    categoria: string
    prioridad: number
    estado: string
    fechaCreacion: Date | string
    fechaFinalizacion?: Date | string | null
    idUsuario: number
    idUsuarioSupervisor?: number | null
  }

  export type ReporteCreateOrConnectWithoutTecnicoInput = {
    where: ReporteWhereUniqueInput
    create: XOR<ReporteCreateWithoutTecnicoInput, ReporteUncheckedCreateWithoutTecnicoInput>
  }

  export type ReporteCreateManyTecnicoInputEnvelope = {
    data: ReporteCreateManyTecnicoInput | ReporteCreateManyTecnicoInput[]
    skipDuplicates?: boolean
  }

  export type ReporteUpsertWithWhereUniqueWithoutTecnicoInput = {
    where: ReporteWhereUniqueInput
    update: XOR<ReporteUpdateWithoutTecnicoInput, ReporteUncheckedUpdateWithoutTecnicoInput>
    create: XOR<ReporteCreateWithoutTecnicoInput, ReporteUncheckedCreateWithoutTecnicoInput>
  }

  export type ReporteUpdateWithWhereUniqueWithoutTecnicoInput = {
    where: ReporteWhereUniqueInput
    data: XOR<ReporteUpdateWithoutTecnicoInput, ReporteUncheckedUpdateWithoutTecnicoInput>
  }

  export type ReporteUpdateManyWithWhereWithoutTecnicoInput = {
    where: ReporteScalarWhereInput
    data: XOR<ReporteUpdateManyMutationInput, ReporteUncheckedUpdateManyWithoutTecnicoInput>
  }

  export type ReporteCreateWithoutSupervisorInput = {
    titulo: string
    descripcion: string
    categoria: string
    prioridad: number
    estado: string
    fechaCreacion: Date | string
    fechaFinalizacion?: Date | string | null
    usuario: UsuarioCreateNestedOneWithoutReportesInput
    tecnico?: UsuarioTecnicoCreateNestedOneWithoutReportesSolucionadosInput
  }

  export type ReporteUncheckedCreateWithoutSupervisorInput = {
    id?: number
    titulo: string
    descripcion: string
    categoria: string
    prioridad: number
    estado: string
    fechaCreacion: Date | string
    fechaFinalizacion?: Date | string | null
    idUsuario: number
    idUsuarioTecnico?: number | null
  }

  export type ReporteCreateOrConnectWithoutSupervisorInput = {
    where: ReporteWhereUniqueInput
    create: XOR<ReporteCreateWithoutSupervisorInput, ReporteUncheckedCreateWithoutSupervisorInput>
  }

  export type ReporteCreateManySupervisorInputEnvelope = {
    data: ReporteCreateManySupervisorInput | ReporteCreateManySupervisorInput[]
    skipDuplicates?: boolean
  }

  export type ReporteUpsertWithWhereUniqueWithoutSupervisorInput = {
    where: ReporteWhereUniqueInput
    update: XOR<ReporteUpdateWithoutSupervisorInput, ReporteUncheckedUpdateWithoutSupervisorInput>
    create: XOR<ReporteCreateWithoutSupervisorInput, ReporteUncheckedCreateWithoutSupervisorInput>
  }

  export type ReporteUpdateWithWhereUniqueWithoutSupervisorInput = {
    where: ReporteWhereUniqueInput
    data: XOR<ReporteUpdateWithoutSupervisorInput, ReporteUncheckedUpdateWithoutSupervisorInput>
  }

  export type ReporteUpdateManyWithWhereWithoutSupervisorInput = {
    where: ReporteScalarWhereInput
    data: XOR<ReporteUpdateManyMutationInput, ReporteUncheckedUpdateManyWithoutSupervisorInput>
  }

  export type UsuarioCreateWithoutReportesInput = {
    nombre: string
    correo: string
    oficina: OficinaCreateNestedOneWithoutUsuariosInput
  }

  export type UsuarioUncheckedCreateWithoutReportesInput = {
    id?: number
    nombre: string
    correo: string
    idOficina: number
  }

  export type UsuarioCreateOrConnectWithoutReportesInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutReportesInput, UsuarioUncheckedCreateWithoutReportesInput>
  }

  export type UsuarioTecnicoCreateWithoutReportesSolucionadosInput = {
    nombre: string
    correo: string
  }

  export type UsuarioTecnicoUncheckedCreateWithoutReportesSolucionadosInput = {
    id?: number
    nombre: string
    correo: string
  }

  export type UsuarioTecnicoCreateOrConnectWithoutReportesSolucionadosInput = {
    where: UsuarioTecnicoWhereUniqueInput
    create: XOR<UsuarioTecnicoCreateWithoutReportesSolucionadosInput, UsuarioTecnicoUncheckedCreateWithoutReportesSolucionadosInput>
  }

  export type UsuarioSupervisorCreateWithoutReportesSupervisadosInput = {
    nombre: string
    correo: string
  }

  export type UsuarioSupervisorUncheckedCreateWithoutReportesSupervisadosInput = {
    id?: number
    nombre: string
    correo: string
  }

  export type UsuarioSupervisorCreateOrConnectWithoutReportesSupervisadosInput = {
    where: UsuarioSupervisorWhereUniqueInput
    create: XOR<UsuarioSupervisorCreateWithoutReportesSupervisadosInput, UsuarioSupervisorUncheckedCreateWithoutReportesSupervisadosInput>
  }

  export type UsuarioUpsertWithoutReportesInput = {
    update: XOR<UsuarioUpdateWithoutReportesInput, UsuarioUncheckedUpdateWithoutReportesInput>
    create: XOR<UsuarioCreateWithoutReportesInput, UsuarioUncheckedCreateWithoutReportesInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutReportesInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutReportesInput, UsuarioUncheckedUpdateWithoutReportesInput>
  }

  export type UsuarioUpdateWithoutReportesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    oficina?: OficinaUpdateOneRequiredWithoutUsuariosNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutReportesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    idOficina?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioTecnicoUpsertWithoutReportesSolucionadosInput = {
    update: XOR<UsuarioTecnicoUpdateWithoutReportesSolucionadosInput, UsuarioTecnicoUncheckedUpdateWithoutReportesSolucionadosInput>
    create: XOR<UsuarioTecnicoCreateWithoutReportesSolucionadosInput, UsuarioTecnicoUncheckedCreateWithoutReportesSolucionadosInput>
    where?: UsuarioTecnicoWhereInput
  }

  export type UsuarioTecnicoUpdateToOneWithWhereWithoutReportesSolucionadosInput = {
    where?: UsuarioTecnicoWhereInput
    data: XOR<UsuarioTecnicoUpdateWithoutReportesSolucionadosInput, UsuarioTecnicoUncheckedUpdateWithoutReportesSolucionadosInput>
  }

  export type UsuarioTecnicoUpdateWithoutReportesSolucionadosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioTecnicoUncheckedUpdateWithoutReportesSolucionadosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioSupervisorUpsertWithoutReportesSupervisadosInput = {
    update: XOR<UsuarioSupervisorUpdateWithoutReportesSupervisadosInput, UsuarioSupervisorUncheckedUpdateWithoutReportesSupervisadosInput>
    create: XOR<UsuarioSupervisorCreateWithoutReportesSupervisadosInput, UsuarioSupervisorUncheckedCreateWithoutReportesSupervisadosInput>
    where?: UsuarioSupervisorWhereInput
  }

  export type UsuarioSupervisorUpdateToOneWithWhereWithoutReportesSupervisadosInput = {
    where?: UsuarioSupervisorWhereInput
    data: XOR<UsuarioSupervisorUpdateWithoutReportesSupervisadosInput, UsuarioSupervisorUncheckedUpdateWithoutReportesSupervisadosInput>
  }

  export type UsuarioSupervisorUpdateWithoutReportesSupervisadosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioSupervisorUncheckedUpdateWithoutReportesSupervisadosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
  }

  export type OficinaCreateManyLocalidadInput = {
    id?: number
    nombre: string
    direccion: string
    piso?: number | null
    idInstitucion: number
  }

  export type OficinaUpdateWithoutLocalidadInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    piso?: NullableIntFieldUpdateOperationsInput | number | null
    Institucion?: InstitucionUpdateOneRequiredWithoutOficinasNestedInput
    usuarios?: UsuarioUpdateManyWithoutOficinaNestedInput
  }

  export type OficinaUncheckedUpdateWithoutLocalidadInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    piso?: NullableIntFieldUpdateOperationsInput | number | null
    idInstitucion?: IntFieldUpdateOperationsInput | number
    usuarios?: UsuarioUncheckedUpdateManyWithoutOficinaNestedInput
  }

  export type OficinaUncheckedUpdateManyWithoutLocalidadInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    piso?: NullableIntFieldUpdateOperationsInput | number | null
    idInstitucion?: IntFieldUpdateOperationsInput | number
  }

  export type OficinaCreateManyInstitucionInput = {
    id?: number
    nombre: string
    direccion: string
    piso?: number | null
    idLocalidad: number
  }

  export type OficinaUpdateWithoutInstitucionInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    piso?: NullableIntFieldUpdateOperationsInput | number | null
    Localidad?: LocalidadUpdateOneRequiredWithoutInstitucionNestedInput
    usuarios?: UsuarioUpdateManyWithoutOficinaNestedInput
  }

  export type OficinaUncheckedUpdateWithoutInstitucionInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    piso?: NullableIntFieldUpdateOperationsInput | number | null
    idLocalidad?: IntFieldUpdateOperationsInput | number
    usuarios?: UsuarioUncheckedUpdateManyWithoutOficinaNestedInput
  }

  export type OficinaUncheckedUpdateManyWithoutInstitucionInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: StringFieldUpdateOperationsInput | string
    piso?: NullableIntFieldUpdateOperationsInput | number | null
    idLocalidad?: IntFieldUpdateOperationsInput | number
  }

  export type UsuarioCreateManyOficinaInput = {
    id?: number
    nombre: string
    correo: string
  }

  export type UsuarioUpdateWithoutOficinaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    reportes?: ReporteUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutOficinaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
    reportes?: ReporteUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateManyWithoutOficinaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    correo?: StringFieldUpdateOperationsInput | string
  }

  export type ReporteCreateManyUsuarioInput = {
    id?: number
    titulo: string
    descripcion: string
    categoria: string
    prioridad: number
    estado: string
    fechaCreacion: Date | string
    fechaFinalizacion?: Date | string | null
    idUsuarioTecnico?: number | null
    idUsuarioSupervisor?: number | null
  }

  export type ReporteUpdateWithoutUsuarioInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    prioridad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tecnico?: UsuarioTecnicoUpdateOneWithoutReportesSolucionadosNestedInput
    supervisor?: UsuarioSupervisorUpdateOneWithoutReportesSupervisadosNestedInput
  }

  export type ReporteUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    prioridad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idUsuarioTecnico?: NullableIntFieldUpdateOperationsInput | number | null
    idUsuarioSupervisor?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ReporteUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    prioridad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idUsuarioTecnico?: NullableIntFieldUpdateOperationsInput | number | null
    idUsuarioSupervisor?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ReporteCreateManyTecnicoInput = {
    id?: number
    titulo: string
    descripcion: string
    categoria: string
    prioridad: number
    estado: string
    fechaCreacion: Date | string
    fechaFinalizacion?: Date | string | null
    idUsuario: number
    idUsuarioSupervisor?: number | null
  }

  export type ReporteUpdateWithoutTecnicoInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    prioridad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usuario?: UsuarioUpdateOneRequiredWithoutReportesNestedInput
    supervisor?: UsuarioSupervisorUpdateOneWithoutReportesSupervisadosNestedInput
  }

  export type ReporteUncheckedUpdateWithoutTecnicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    prioridad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idUsuario?: IntFieldUpdateOperationsInput | number
    idUsuarioSupervisor?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ReporteUncheckedUpdateManyWithoutTecnicoInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    prioridad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idUsuario?: IntFieldUpdateOperationsInput | number
    idUsuarioSupervisor?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ReporteCreateManySupervisorInput = {
    id?: number
    titulo: string
    descripcion: string
    categoria: string
    prioridad: number
    estado: string
    fechaCreacion: Date | string
    fechaFinalizacion?: Date | string | null
    idUsuario: number
    idUsuarioTecnico?: number | null
  }

  export type ReporteUpdateWithoutSupervisorInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    prioridad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    usuario?: UsuarioUpdateOneRequiredWithoutReportesNestedInput
    tecnico?: UsuarioTecnicoUpdateOneWithoutReportesSolucionadosNestedInput
  }

  export type ReporteUncheckedUpdateWithoutSupervisorInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    prioridad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idUsuario?: IntFieldUpdateOperationsInput | number
    idUsuarioTecnico?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ReporteUncheckedUpdateManyWithoutSupervisorInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    categoria?: StringFieldUpdateOperationsInput | string
    prioridad?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFinalizacion?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    idUsuario?: IntFieldUpdateOperationsInput | number
    idUsuarioTecnico?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use LocalidadCountOutputTypeDefaultArgs instead
     */
    export type LocalidadCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = LocalidadCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InstitucionCountOutputTypeDefaultArgs instead
     */
    export type InstitucionCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = InstitucionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OficinaCountOutputTypeDefaultArgs instead
     */
    export type OficinaCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = OficinaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioTecnicoCountOutputTypeDefaultArgs instead
     */
    export type UsuarioTecnicoCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UsuarioTecnicoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioSupervisorCountOutputTypeDefaultArgs instead
     */
    export type UsuarioSupervisorCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UsuarioSupervisorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocalidadDefaultArgs instead
     */
    export type LocalidadArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = LocalidadDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InstitucionDefaultArgs instead
     */
    export type InstitucionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = InstitucionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OficinaDefaultArgs instead
     */
    export type OficinaArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = OficinaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioDefaultArgs instead
     */
    export type UsuarioArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UsuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioTecnicoDefaultArgs instead
     */
    export type UsuarioTecnicoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UsuarioTecnicoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioSupervisorDefaultArgs instead
     */
    export type UsuarioSupervisorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UsuarioSupervisorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReporteDefaultArgs instead
     */
    export type ReporteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ReporteDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}